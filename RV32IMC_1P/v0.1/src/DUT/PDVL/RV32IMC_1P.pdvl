
   Copyright 2024 Tobias Strauch, Munich, Bavaria
   Licensed under the Apache License, Version 2.0, see LICENSE for details.
   SPDX-License-Identifier: Apache-2.0

<" 

cl_rv32imc {}

/////////////////////////////////////////////////////////
// Build the RISCV 32 IMC with single pipeline stage
/////////////////////////////////////////////////////////
build RV32IMC_1P {
   ///////////////////////////////////////////// 
   // Joining RISC-V IMC ISA
   ///////////////////////////////////////////// 
   join cl_rv32i cl_rv32imc;
   join cl_rv32i_rf cl_rv32imc;
   join cl_rv32i_dec cl_rv32imc;
   join cl_rv32m_syn cl_rv32imc;
   join cl_rv32m_dec cl_rv32imc;
   join cl_rv32c cl_rv32imc;
   join cl_rv32c_list cl_rv32imc;
   join cl_rv32c_dec_op0 cl_rv32imc;
   join cl_rv32c_dec_op1 cl_rv32imc;
   join cl_rv32c_dec_op2 cl_rv32imc;
   join cl_rv32imc;

   ///////////////////////////////////////////// 
   // Generate clocking structure in cl_rv32imc
   // and implement multi-cycle structure
   ///////////////////////////////////////////// 
   join {
      parameter PC_LEN = 32; 

      e_clk posedge clk;  
      tr_rf_write { @c_rf_write { d_rf_write; } } 
      
      reg [5:0] mc;
      
	  tr_clocking { 
	     @e_clk  { 
            tr_rv32i;
            tr_rv32m; 
            tr_rv32c; 
            tr_rf_write; } }

      d_pc_stall { pc_next = pc; }
      c_mc_0 { if (mc == 0) this; }
      c_mc_1 { if (mc == 1) this; }
      c_mc_2 { if (mc == 2) this; }
      c_mc_3 { if (mc == 3) this; }
      d_mc_reset { mc = 0; }
      d_mc_1 { mc = 1; }
      d_mc_2 { mc = 2; }
      d_mc_3 { mc = 3; }
      d_mc_m1 { mc = mc - 1; }
	  tr_clocking_pc { 
	     @c_arst { d_mc_reset;
	               d_pc_reset; }
         else { 
            @e_clk  { 
               d_pc_next;
               @c_mc_0 { 
                  tr_mc_mul;
                  tr_mc_mulh;
                  tr_mc_mulhu;
                  tr_mc_mulhsu;
                  tr_mc_div;
                  tr_mc_divu;
                  tr_mc_rem;
                  tr_mc_remu; }
               else {
                  d_mc_m1; } } } } } cl_rv32imc;

   ///////////////////////////////////////////// 
   // Generate RF submodule and move RF logic
   ///////////////////////////////////////////// 
   place RV32IMC_1P_RF i_rf;
   move rs1_dato, rs2_dato, rf i_rf;
}	
">
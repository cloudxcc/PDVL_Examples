
   Copyright 2024 Tobias Strauch, Munich, Bavaria
   Licensed under the Apache License, Version 2.0, see LICENSE for details.
   SPDX-License-Identifier: Apache-2.0

<" cl_rv32i_rf {
   reg [31:0] rf [31:0]; 
} ">
<" cl_rv32i {
   ///////////////////////////////////////////// 
   // PC 
   ///////////////////////////////////////////// 
   item [PC_LEN - 1 : 0] pc_next; 
   reg [PC_LEN - 1 : 0] pc; 
   d_pc_reset { pc = 0; } 
   d_pc_next { pc = pc_next; } 
   c_pipe_invalid;
   ///////////////////////////////////////////// 
   // Instruction 
   ///////////////////////////////////////////// 
   item [32] instr; 
   reg [32] instr_s1; 
   reg [32] instr_s2; 
   ///////////////////////////////////////////// 
   // Formats 
   ///////////////////////////////////////////// 
   item [7] opcode_i_s1 = instr_s1[6:0];
   item [8] funct7_i_s1 = instr_s1[31:25]; 
   item [3] funct3_i_s1 = instr_s1[14:12];
   item [8] funct7_i = instr_s2[31:25]; 
   item [3] funct3_i = instr_s2[14:12];
   item [5] rs2i = instr_s1[24:20];
   item [5] rs1i = instr_s1[19:15];
   item [5] rdi = instr_s2[11:7];
   item [7] opcode_i = instr_s2[6:0];
   item [12] i_type = instr_s2[31:20];
   item [12] s_type = {instr_s2[31:25], instr_s2[11:7]};
   item [11:0] b_type = {instr_s2[31], instr_s2[7], instr_s2[30:25], instr_s2[11:8]};
   item [19:0] j_type = {instr_s2[31], instr_s2[19:12], instr_s2[20], instr_s2[30:21]};
   item [31:0] i_immediate = {{20{instr_s2[31]}}, instr_s2[31:20]};
   item [31:0] u_immediate = {instr_s2[31:12], 12'h000};
   ///////////////////////////////////////////// 
   // Adder datapath 
   ///////////////////////////////////////////// 
   item [31:0] i_add_a;
   item [31:0] i_add_b;
   item [31:0] dp_add = i_add_a + i_add_b;
   ///////////////////////////////////////////// 
   // ADDI 
   ///////////////////////////////////////////// 
   //d_addi { dp_out = rs1_dato + i_immediate; }
   d_addi { i_add_a = rs1_dato;
            i_add_b = i_immediate;
            dp_out = dp_add; }
   tr_rv32i_addi { 
      @c_instr_i_addi_s1 { 
         d_rs1i_addr; }
      @c_instr_i_addi_s2 { 
         d_addi; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } }
   ///////////////////////////////////////////// 
   // SLTI 
   ///////////////////////////////////////////// 
   //d_slti { dp_out = $signed(rs1_dato) < $signed(i_immediate); }
   item [32:0] i_less_a;
   item [32:0] i_less_b;
   item [31:0] less_result = $signed(i_less_a) < $signed(i_less_b);
   d_slti { i_less_a = {rs1_dato[31], rs1_dato};
            i_less_b = {i_immediate[31], i_immediate};
            dp_out = less_result; }
   tr_rv32i_slti { 
      @c_instr_i_slti_s1 { 
         d_rs1i_addr; }
      @c_instr_i_slti_s2 { 
         d_slti; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // SLTIU 
   ///////////////////////////////////////////// 
   //d_sltiu { dp_out = rs1_dato < i_immediate; }
   d_sltiu { i_less_a = {1'b0, rs1_dato};
             i_less_b = {1'b0, i_immediate};
             dp_out = less_result; }
   tr_rv32i_sltiu { 
      @c_instr_i_sltiu_s1 { 
         d_rs1i_addr; }
      @c_instr_i_sltiu_s2 { 
         d_sltiu; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // ANDI 
   ///////////////////////////////////////////// 
   d_andi { dp_out = rs1_dato & i_immediate; }
   tr_rv32i_andi { 
      @c_instr_i_andi_s1 { 
         d_rs1i_addr; }
      @c_instr_i_andi_s2 { 
         d_andi; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // ORI 
   ///////////////////////////////////////////// 
   d_ori { dp_out = rs1_dato | i_immediate; }
   tr_rv32i_ori { 
      @c_instr_i_ori_s1 { 
         d_rs1i_addr; }
      @c_instr_i_ori_s2 { 
         d_ori; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // XORI 
   ///////////////////////////////////////////// 
   d_xori { dp_out = rs1_dato ^ i_immediate; }
   tr_rv32i_xori { 
      @c_instr_i_xori_s1 { 
         d_rs1i_addr; }
      @c_instr_i_xori_s2 { 
         d_xori; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // SLLI 
   ///////////////////////////////////////////// 
   item [4:0] shamt = instr_s2[24:20];
   //d_slli { dp_out = rs1_dato << shamt; }
   item [31:0] i_shl_data;
   item [31:0] i_shl_shamt;
   item [31:0] shl_result = i_shl_data << i_shl_shamt;
   d_slli { i_shl_data = rs1_dato;
            i_shl_shamt = shamt;
            dp_out = shl_result; }
   tr_rv32i_slli { 
      @c_instr_i_slli_s1 { 
         d_rs1i_addr; }
      @c_instr_i_slli_s2 { 
         d_slli;
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // SRLI 
   ///////////////////////////////////////////// 
   //d_srli { dp_out = rs1_dato >> shamt; }
   d_srli { i_sra_data = {1'b0, rs1_dato};
            i_sra_shamt = shamt;
            dp_out = sra_result[31:0]; }
   tr_rv32i_srli { 
      @c_instr_i_srli_s1 { 
         d_rs1i_addr; }
      @c_instr_i_srli_s2 { 
         d_srli; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // SRAI 
   ///////////////////////////////////////////// 
   //d_srai { dp_out = $signed(rs1_dato) >>> shamt; }
   item [32:0] i_sra_data;
   item [31:0] i_sra_shamt;
   item [32:0] sra_result = $signed(i_sra_data) >>> $signed(i_sra_shamt);
   d_srai { i_sra_data = {rs1_dato[31], rs1_dato};
            i_sra_shamt = shamt;
            dp_out = sra_result[31:0]; }
   tr_rv32i_srai { 
      @c_instr_i_srai_s1 { 
         d_rs1i_addr; }
      @c_instr_i_srai_s2 { 
         d_srai; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // LUI 
   ///////////////////////////////////////////// 
   d_lui { dp_out = u_immediate; }
   tr_rv32i_lui { 
      @c_instr_i_lui_s2 { 
         d_lui; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // AUIPC 
   ///////////////////////////////////////////// 
   //d_auipc { dp_out = pc + u_immediate; }
   d_auipc { i_add_a = pc - pc_clear;
             i_add_b = u_immediate;
             dp_out = dp_add; }
   tr_rv32i_auipc { 
      @c_instr_i_auipc_s2 { 
         d_auipc; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // ADD 
   ///////////////////////////////////////////// 
   //d_add { dp_out = rs1_dato + rs2_dato; }
   d_add { i_add_a = rs1_dato;
           i_add_b = rs2_dato;
           dp_out = dp_add; }
   tr_rv32i_add { 
      @c_instr_i_add_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_add_s2 { 
         d_add; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // SLT 
   ///////////////////////////////////////////// 
   //d_slt { dp_out = $signed(rs1_dato) < $signed(rs2_dato); }
   d_slt { i_less_a = {rs1_dato[31], rs1_dato};
           i_less_b = {rs2_dato[31], rs2_dato};
           dp_out = less_result; }
   tr_rv32i_slt { 
      @c_instr_i_slt_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_slt_s2 { 
         d_slt; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // SLTU 
   ///////////////////////////////////////////// 
   //d_sltu { dp_out = rs1_dato < rs2_dato; }
   d_sltu { i_less_a = {1'b0, rs1_dato};
            i_less_b = {1'b0, rs2_dato};
            dp_out = less_result; }
   tr_rv32i_sltu { 
      @c_instr_i_sltu_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_sltu_s2 { 
         d_sltu; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // SUB 
   ///////////////////////////////////////////// 
   //d_sub { dp_out = rs1_dato - rs2_dato; }
   item [31:0] i_sub_b;
   item [31:0] d_sub_2compl = 0 - i_sub_b;
   d_sub { i_add_a = rs1_dato;
           i_add_b = d_sub_2compl;
           i_sub_b = rs2_dato;
           dp_out = dp_add; }
   tr_rv32i_sub { 
      @c_instr_i_sub_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_sub_s2 { 
         d_sub; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // AND 
   ///////////////////////////////////////////// 
   d_and { dp_out = rs1_dato & rs2_dato; }
   tr_rv32i_and { 
      @c_instr_i_and_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_and_s2 { 
         d_and; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // OR 
   ///////////////////////////////////////////// 
   d_or { dp_out = rs1_dato | rs2_dato; }
   tr_rv32i_or { 
      @c_instr_i_or_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_or_s2 { 
         d_or; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // XOR 
   ///////////////////////////////////////////// 
   d_xor { dp_out = rs1_dato ^ rs2_dato; }
   tr_rv32i_xor { 
      @c_instr_i_xor_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_xor_s2 { 
         d_xor; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // SLL 
   ///////////////////////////////////////////// 
   //d_sll { dp_out = rs1_dato << rs2_dato; }
   d_sll { i_shl_data = rs1_dato;
           i_shl_shamt = rs2_dato[4:0];
           dp_out = shl_result; }
   tr_rv32i_sll { 
      @c_instr_i_sll_s1 { 
          d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_sll_s2 { 
         d_sll; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // SRL 
   ///////////////////////////////////////////// 
   //d_srl { dp_out = rs1_dato >> rs2_dato; }
   d_srl { i_sra_data = {1'b0, rs1_dato};
           i_sra_shamt = rs2_dato[4:0];
           dp_out = sra_result[31:0]; }
   tr_rv32i_srl { 
      @c_instr_i_srl_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_srl_s2 { 
         d_srl; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // SRA 
   ///////////////////////////////////////////// 
   //d_sra { dp_out = $signed(rs1_dato) >>> rs2_dato; }
   d_sra { i_sra_data = {rs1_dato[31], rs1_dato};
           i_sra_shamt = rs2_dato[4:0];
           dp_out = sra_result[31:0]; }
   tr_rv32i_sra { 
      @c_instr_i_sra_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_sra_s2 { 
         d_sra; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // JAL 
   ///////////////////////////////////////////// 
   item [31:0] offset_20 = {{11{j_type[19]}}, j_type, 1'b0};
   d_jal { dp_out = pc - pc_clear + 4; }
   //d_pc_jal { pc_next = pc + offset_20; }
   d_pc_jal { i_add_a = pc - pc_clear;
              i_add_b = offset_20;
              pc_next = dp_add; }
   tr_rv32i_jal { 
      @c_instr_i_jal_s2 { 
         d_jal; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         c_pipe_invalid;
         d_pc_jal; } } 
   ///////////////////////////////////////////// 
   // JALR 
   ///////////////////////////////////////////// 
   item [11:0] imm_11 = {{20{instr_s2[31]}}, instr_s2[31:20]};
   d_jalr { dp_out = pc - pc_clear + 4; }
   //d_pc_jalr { pc_next = rs1_dato + imm_11; }
   d_pc_jalr { i_add_a = rs1_dato;
              i_add_b = imm_11;
              pc_next = dp_add; }
   tr_rv32i_jalr { 
      @c_instr_i_jalr_s1 { 
         d_rs1i_addr; }
      @c_instr_i_jalr_s2 { 
         d_jalr; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         c_pipe_invalid;
         d_pc_jalr; } } 
   ///////////////////////////////////////////// 
   // BEQ 
   ///////////////////////////////////////////// 
   c_cond_beq { if (rs1_dato == rs2_dato) this; }
   //d_pc_branch { pc_next = pc + {b_type, 1'b0}; }
   d_pc_branch { i_add_a = pc - pc_clear;
                 i_add_b = {{19{b_type[11]}}, b_type, 1'b0}; 
                 pc_next = dp_add; }
   tr_rv32i_beq { 
      @c_instr_i_beq_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_beq_s2 { 
         @c_cond_beq { 
            c_pipe_invalid;
            d_pc_branch; }  
         else { /* d_pc4; */ } } } 
   ///////////////////////////////////////////// 
   // BNE 
   ///////////////////////////////////////////// 
   //c_cond_bne { if (rs1_dato != rs2_dato) this; }
   tr_rv32i_bne { 
      @c_instr_i_bne_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_bne_s2 { 
         //@c_cond_bne { d_pc_branch; }
         //else { d_pc4; } } } 
         @c_cond_beq { /* d_pc4; */ }
         else { 
            c_pipe_invalid;
            d_pc_branch; } } } 
   ///////////////////////////////////////////// 
   // BLT 
   ///////////////////////////////////////////// 
   //c_cond_blt { if ($signed(rs1_dato) < $signed(rs2_dato)) this; }
   d_blt { i_less_a = {rs1_dato[31], rs1_dato};
           i_less_b = {rs2_dato[31], rs2_dato};
           dp_out = less_result; }
   c_less { if (less_result[0] == 1'b1) this; }
   tr_rv32i_blt { 
      @c_instr_i_blt_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_blt_s2 { 
         d_blt; 
         @c_less { 
            c_pipe_invalid;
            d_pc_branch; }  
         else { /* d_pc4; */ } } } 
   ///////////////////////////////////////////// 
   // BGE 
   ///////////////////////////////////////////// 
   //c_cond_bge { if ($signed(rs1_dato) >= $signed(rs2_dato)) this; }
   tr_rv32i_bge { 
      @c_instr_i_bge_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_bge_s2 { 
         //@c_cond_bge { d_pc_branch; }
         //else { d_pc4; } } } 
         d_blt; 
         @c_less { /* d_pc4; */ }
         else { 
            c_pipe_invalid;
            d_pc_branch; } } } 
   ///////////////////////////////////////////// 
   // BLTU 
   ///////////////////////////////////////////// 
   //c_cond_bltu { if (rs1_dato < rs2_dato) this; }
   d_bltu { i_less_a = {1'b0, rs1_dato};
            i_less_b = {1'b0, rs2_dato};
            dp_out = less_result; }
   tr_rv32i_bltu { 
      @c_instr_i_bltu_s1 { 
         d_rs1i_addr; 
         d_rs2i_addr; }
      @c_instr_i_bltu_s2 { 
         d_bltu; 
         @c_less { 
            c_pipe_invalid;
            d_pc_branch; }
         else { /* d_pc4; */ } } } 
   ///////////////////////////////////////////// 
   // BGEU 
   ///////////////////////////////////////////// 
   //c_cond_bgeu { if (rs1_dato >= rs2_dato) this; }
   tr_rv32i_bgeu { 
      @c_instr_i_bgeu_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_bgeu_s2 { 
         d_bltu; 
         @c_less { /* d_pc4; */ }
         else { 
            c_pipe_invalid;
            d_pc_branch; } } } 
   ///////////////////////////////////////////// 
   // LW, LH, LHU, LB, LBU 
   ///////////////////////////////////////////// 
   d_load_lb { dp_out = {{24{dmem_load_data[7]}}, dmem_load_data[7:0]}; }
   d_load_lh { dp_out = {{16{dmem_load_data[15]}},  dmem_load_data[15:0]}; }
   d_load_lw { dp_out = dmem_load_data; }
   d_load_lbu { dp_out = {{24{1'b0}}, dmem_load_data[7:0]}; }
   d_load_lhu { dp_out = {{16{1'b0}}, dmem_load_data[15:0]}; }
   //d_dmem_load_addr { dmem_load_addr = {{20{i_type[11]}}, i_type} + rs1_dato; }
   d_dmem_load_addr { i_add_a = rs1_dato;
                      i_add_b = {{20{i_type[11]}}, i_type}; 
                      dmem_load_addr = dp_add; }
   d_dmem_load_width { dmem_load_width = funct3_i[2:0]; }
   tr_rv32i_load { //d_rs1i_addr; 
      d_dmem_load_addr; 
      d_dmem_load_width; 
      c_dmem_load; 
      d_rd_dp_out; d_rdi_addr; c_rf_write; 
      /* d_pc4; */ } 
   tr_rv32i_lw { 
      @c_instr_i_lw_s1 {
         d_rs1i_addr; }
      @c_instr_i_lw_s2 { 
         tr_rv32i_load; d_load_lw; } } 
   tr_rv32i_lh { 
      @c_instr_i_lh_s1 { 
         d_rs1i_addr; }
      @c_instr_i_lh_s2 { 
         tr_rv32i_load; d_load_lh; } } 
   tr_rv32i_lhu { 
      @c_instr_i_lhu_s1 { 
         d_rs1i_addr; }
      @c_instr_i_lhu_s2 { 
         tr_rv32i_load; d_load_lhu; } } 
   tr_rv32i_lb { 
      @c_instr_i_lb_s1 { 
         d_rs1i_addr; }
      @c_instr_i_lb_s2 { 
         tr_rv32i_load; d_load_lb; } } 
   tr_rv32i_lbu { 
      @c_instr_i_lbu_s1 { 
         d_rs1i_addr; }
      @c_instr_i_lbu_s2 { 
         tr_rv32i_load; d_load_lbu; } } 
   ///////////////////////////////////////////// 
   // SW, SB, SH 
   ///////////////////////////////////////////// 
   //d_dmem_store_addr { dmem_store_addr = {{20{s_type[11]}}, s_type} + rs1_dato; }
   d_dmem_store_addr { i_add_a = rs1_dato;
                       i_add_b = {{20{s_type[11]}}, s_type}; 
                       dmem_store_addr = dp_add; }
   d_dmem_store_width { dmem_store_width = funct3_i[2:0]; }
   d_dmem_store_data { dmem_store_data = rs2_dato; }
   tr_rv32i_store {
      //d_rs1i_addr; 
      //d_rs2i_addr; 
      d_dmem_store_addr; 
      d_dmem_store_width; 
      c_dmem_store; 
      /* d_pc4; */ } 
   tr_rv32i_sw { 
      @c_instr_i_sw_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_sw_s2 { 
         tr_rv32i_store;  d_dmem_store_data; } }
   tr_rv32i_sb { 
      @c_instr_i_sb_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_sb_s2 { 
         tr_rv32i_store;  d_dmem_store_data; } }
   tr_rv32i_sh { 
      @c_instr_i_sh_s1 { 
         d_rs1i_addr; d_rs2i_addr; }
      @c_instr_i_sh_s2 { 
         tr_rv32i_store;  d_dmem_store_data; } }
   ///////////////////////////////////////////// 
   // FENCE 
   ///////////////////////////////////////////// 
   item [3:0] fm;
   item [3:0] pred;
   item [3:0] succ;
   d_fence { fm = instr_s2[31:28]; pred = instr_s2[27:24]; succ = instr_s2[23:20]; }
   tr_rv32i_fence { 
      @c_instr_i_fence_s1 { 
         d_rs1i_addr; }
      @c_instr_i_fence_s2 { 
         d_fence; 
         d_rd_dp_out; d_rdi_addr; c_rf_write;  
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // ECALL 
   ///////////////////////////////////////////// 
   tr_rv32i_ecall { 
      @c_instr_i_ecall_s2 { 
         /* d_pc4; */ } } 
   tr_rv32i_ebreak { 
      @c_instr_i_ebreak_s2 { 
         /* d_pc4; */ } } 
   ///////////////////////////////////////////// 
   // Registerfile 
   ///////////////////////////////////////////// 
   // read from rf; 
   item [31:0] rs1_dato_async;
   item [31:0] rs2_dato_async;
   d_rs1_dato_async { rs1_dato_async = (rs1_addr == 0) ? 0 : rf[rs1_addr]; } 
   d_rs2_dato_async { rs2_dato_async = (rs2_addr == 0) ? 0 : rf[rs2_addr]; } 
   tr_rs_dato_async { d_rs2_dato_async; 
                      d_rs1_dato_async; } 
   reg [31:0] rs1_dato;
   reg [31:0] rs2_dato;
   d_rs1_dato { rs1_dato = rs1_dato_async; } 
   d_rs2_dato { rs2_dato = rs2_dato_async; } 
   d_rs1_dato_wrth { rs1_dato = rd_dati; } 
   d_rs2_dato_wrth { rs2_dato = rd_dati; } 
   //tr_rs_dato { d_rs2_dato_async; d_rs1_dato; } 
   // write to rf; 
   d_rf_write { rf[rd_addr] = rd_dati; } 
   c_rf_write; 
   item [4:0] rs1_addr;
   item [4:0] rs2_addr;
   item [4:0] rd_addr;
   item [31 : 0] rd_dati;
   d_rd_dp_out { rd_dati = dp_out; } 
   d_rs1i_addr { rs1_addr = rs1i; }
   d_rs2i_addr { rs2_addr = rs2i; }
   d_rdi_addr { rd_addr = rdi; }
   ///////////////////////////////////////////// 
   // PC cont 
   ///////////////////////////////////////////// 
   //d_pc4 { pc_next = pc + 4; } 
   ///////////////////////////////////////////// 
   // Datapath 
   ///////////////////////////////////////////// 
   item [31:0] dp_out;
   ///////////////////////////////////////////// 
   // Memory interface 
   ///////////////////////////////////////////// 
   item [32:0] dmem_load_addr;
   item [2:0] dmem_load_width;
   item [31:0] dmem_load_data;
   c_dmem_load;
   item [32:0] dmem_store_addr;
   item [2:0] dmem_store_width;
   item [31:0] dmem_store_data;
   c_dmem_store;
} ">
<" cl_rv32i_dec {
   ///////////////////////////////////////////// 
   // Support function 
   ///////////////////////////////////////////// 
   c_cmp(integer a, integer b) { if (a == b) this; }
   ///////////////////////////////////////////// 
   // I transactions 
   ///////////////////////////////////////////// 
   tr_rv32i { 
      tr_rv32i_lui;  tr_rv32i_auipc;  tr_rv32i_jal;  tr_rv32i_jalr; 
      tr_rv32i_beq;  tr_rv32i_bne;  tr_rv32i_blt;  tr_rv32i_bge;  tr_rv32i_bltu;  tr_rv32i_bgeu; 
      tr_rv32i_lb;  tr_rv32i_lh;  tr_rv32i_lw;  tr_rv32i_lbu;  tr_rv32i_lhu; 
      tr_rv32i_sb;  tr_rv32i_sh;  tr_rv32i_sw; 
      tr_rv32i_addi;  tr_rv32i_slti;  tr_rv32i_sltiu;  tr_rv32i_xori;  tr_rv32i_ori;  tr_rv32i_andi; 
      tr_rv32i_slli;  tr_rv32i_srli;  tr_rv32i_srai; 
      tr_rv32i_add;  tr_rv32i_sub;  tr_rv32i_sll;  tr_rv32i_slt;  tr_rv32i_sltu; 
      tr_rv32i_xor;  tr_rv32i_srl;  tr_rv32i_sra;  tr_rv32i_or;  tr_rv32i_and; 
      tr_rv32i_fence; tr_rv32i_ecall; tr_rv32i_ebreak; } 
   ///////////////////////////////////////////// 
   // I conditions 
   ///////////////////////////////////////////// 
   c_instr_i_lui_s1;  c_instr_i_auipc_s1;  c_instr_i_jal_s1; c_instr_i_jalr_s1;
   c_instr_i_beq_s1;  c_instr_i_bne_s1;  c_instr_i_blt_s1;  c_instr_i_bge_s1;  c_instr_i_bltu_s1;  c_instr_i_bgeu_s1;
   c_instr_i_lb_s1;  c_instr_i_lh_s1;  c_instr_i_lw_s1;  c_instr_i_lbu_s1;  c_instr_i_lhu_s1;
   c_instr_i_sb_s1;  c_instr_i_sh_s1;  c_instr_i_sw_s1;
   c_instr_i_addi_s1;  c_instr_i_slti_s1;  c_instr_i_sltiu_s1;  c_instr_i_xori_s1;  c_instr_i_ori_s1;  c_instr_i_andi_s1;
   c_instr_i_slli_s1;  c_instr_i_srli_s1;  c_instr_i_srai_s1;
   c_instr_i_add_s1;  c_instr_i_sub_s1;  c_instr_i_sll_s1;  c_instr_i_slt_s1;  c_instr_i_sltu_s1;
   c_instr_i_xor_s1;  c_instr_i_srl_s1;  c_instr_i_sra_s1;  c_instr_i_or_s1;  c_instr_i_and_s1;
   c_instr_i_fence_s1;  c_instr_i_ecall_s1;  c_instr_i_ebreak_s1;
   ///////////////////////////////////////////// 
   // I decode 
   ///////////////////////////////////////////// 
   tr_decode_s1 {
      @c_cmp(opcode_i_s1, 7'b0110111) { c_instr_i_lui_s1; }
      @c_cmp(opcode_i_s1, 7'b0010111) { c_instr_i_auipc_s1; }
      @c_cmp(opcode_i_s1, 7'b1101111) { c_instr_i_jal_s1; }
      @c_cmp(opcode_i_s1, 7'b1100111) {
         @c_cmp(funct3_i_s1, 0) { c_instr_i_jalr_s1; } }
      @c_cmp(opcode_i_s1, 7'b0000011) {
         @c_cmp(funct3_i_s1, 0) { c_instr_i_lb_s1; }
         @c_cmp(funct3_i_s1, 1) { c_instr_i_lh_s1; }
         @c_cmp(funct3_i_s1, 2) { c_instr_i_lw_s1; }
         @c_cmp(funct3_i_s1, 4) { c_instr_i_lbu_s1; }
         @c_cmp(funct3_i_s1, 5) { c_instr_i_lhu_s1; } }
      @c_cmp(opcode_i_s1, 7'b0010011) {
         @c_cmp(funct3_i_s1, 0) { c_instr_i_addi_s1; }
         @c_cmp(funct3_i_s1, 1) { 
            @c_cmp(funct7_i_s1, 0) { c_instr_i_slli_s1; } }
         @c_cmp(funct3_i_s1, 2) { c_instr_i_slti_s1; }
         @c_cmp(funct3_i_s1, 3) { c_instr_i_sltiu_s1; }
         @c_cmp(funct3_i_s1, 4) { c_instr_i_xori_s1; }
         @c_cmp(funct3_i_s1, 5) { 
           	@c_cmp(funct7_i_s1, 0) { c_instr_i_srli_s1; }
           	@c_cmp(funct7_i_s1, 32) { c_instr_i_srai_s1; } }
         @c_cmp(funct3_i_s1, 6) { c_instr_i_ori_s1; }
         @c_cmp(funct3_i_s1, 7) { c_instr_i_andi_s1; } }
      @c_cmp(opcode_i_s1, 7'b0100011) {
         @c_cmp(funct3_i_s1, 0) { c_instr_i_sb_s1; }
         @c_cmp(funct3_i_s1, 1) { c_instr_i_sh_s1; }
         @c_cmp(funct3_i_s1, 2) { c_instr_i_sw_s1; } }
      @c_cmp(opcode_i_s1, 7'b0110011) {
         @c_cmp(funct3_i_s1, 0) {
           	@c_cmp(funct7_i_s1, 0) { c_instr_i_add_s1; }
           	@c_cmp(funct7_i_s1, 32) { c_instr_i_sub_s1; } }
         @c_cmp(funct3_i_s1, 1) {
           	@c_cmp(funct7_i_s1, 0) { c_instr_i_sll_s1; } }
         @c_cmp(funct3_i_s1, 2) {
           	@c_cmp(funct7_i_s1, 0) { c_instr_i_slt_s1; } }
         @c_cmp(funct3_i_s1, 3) {
           	@c_cmp(funct7_i_s1, 0)  { c_instr_i_sltu_s1; } }
         @c_cmp(funct3_i_s1, 4) { @c_cmp(funct7_i_s1, 0)  { c_instr_i_xor_s1; } }
         @c_cmp(funct3_i_s1, 5) {
           	@c_cmp(funct7_i_s1, 0)  { c_instr_i_srl_s1; }
           	@c_cmp(funct7_i_s1, 32) { c_instr_i_sra_s1; } }
         @c_cmp(funct3_i_s1, 6) { @c_cmp(funct7_i_s1, 0)  { c_instr_i_or_s1; } }
     	   @c_cmp(funct3_i_s1, 7) { @c_cmp(funct7_i_s1, 0)  { c_instr_i_and_s1; } } }
      @c_cmp(opcode_i_s1, 7'b1100011) {
         @c_cmp(funct3_i_s1, 0) { c_instr_i_beq_s1; }
         @c_cmp(funct3_i_s1, 1) { c_instr_i_bne_s1; }
         @c_cmp(funct3_i_s1, 4) { c_instr_i_blt_s1; }
         @c_cmp(funct3_i_s1, 5) { c_instr_i_bge_s1; }
         @c_cmp(funct3_i_s1, 6) { c_instr_i_bltu_s1; }
         @c_cmp(funct3_i_s1, 7) { c_instr_i_bgeu_s1; } } 
      @c_cmp(opcode_i_s1, 7'b1110011) {
         @c_cmp(funct3_i_s1, 0) { c_instr_i_fence_s1; } }
      @c_cmp(opcode_i_s1, 7'b1110011) {
         @c_cmp(instr_s1[31:7], 25'h000000) { c_instr_i_ecall_s1; }
         @c_cmp(instr_s1[31:7], 25'h002000) { c_instr_i_ebreak_s1; } } }
   ///////////////////////////////////////////// 
   // I conditions 
   ///////////////////////////////////////////// 
   c_instr_i_lui_s2;  c_instr_i_auipc_s2;  c_instr_i_jal_s2; c_instr_i_jalr_s2;
   c_instr_i_beq_s2;  c_instr_i_bne_s2;  c_instr_i_blt_s2;  c_instr_i_bge_s2;  c_instr_i_bltu_s2;  c_instr_i_bgeu_s2;
   c_instr_i_lb_s2;  c_instr_i_lh_s2;  c_instr_i_lw_s2;  c_instr_i_lbu_s2;  c_instr_i_lhu_s2;
   c_instr_i_sb_s2;  c_instr_i_sh_s2;  c_instr_i_sw_s2;
   c_instr_i_addi_s2;  c_instr_i_slti_s2;  c_instr_i_sltiu_s2;  c_instr_i_xori_s2;  c_instr_i_ori_s2;  c_instr_i_andi_s2;
   c_instr_i_slli_s2;  c_instr_i_srli_s2;  c_instr_i_srai_s2;
   c_instr_i_add_s2;  c_instr_i_sub_s2;  c_instr_i_sll_s2;  c_instr_i_slt_s2;  c_instr_i_sltu_s2;
   c_instr_i_xor_s2;  c_instr_i_srl_s2;  c_instr_i_sra_s2;  c_instr_i_or_s2;  c_instr_i_and_s2;
   c_instr_i_fence_s2;  c_instr_i_ecall_s2;  c_instr_i_ebreak_s2;
   ///////////////////////////////////////////// 
   // I decode 
   ///////////////////////////////////////////// 
   tr_decode_s2 {
      @c_cmp(opcode_i, 7'b0110111) { c_instr_i_lui_s2; }
      @c_cmp(opcode_i, 7'b0010111) { c_instr_i_auipc_s2; }
      @c_cmp(opcode_i, 7'b1101111) { c_instr_i_jal_s2; }
      @c_cmp(opcode_i, 7'b1100111) {
         @c_cmp(funct3_i, 0) { c_instr_i_jalr_s2; } }
      @c_cmp(opcode_i, 7'b0000011) {
         @c_cmp(funct3_i, 0) { c_instr_i_lb_s2; }
         @c_cmp(funct3_i, 1) { c_instr_i_lh_s2; }
         @c_cmp(funct3_i, 2) { c_instr_i_lw_s2; }
         @c_cmp(funct3_i, 4) { c_instr_i_lbu_s2; }
         @c_cmp(funct3_i, 5) { c_instr_i_lhu_s2; } }
      @c_cmp(opcode_i, 7'b0010011) {
         @c_cmp(funct3_i, 0) { c_instr_i_addi_s2; }
         @c_cmp(funct3_i, 1) { 
            @c_cmp(funct7_i, 0) { c_instr_i_slli_s2; } }
         @c_cmp(funct3_i, 2) { c_instr_i_slti_s2; }
         @c_cmp(funct3_i, 3) { c_instr_i_sltiu_s2; }
         @c_cmp(funct3_i, 4) { c_instr_i_xori_s2; }
         @c_cmp(funct3_i, 5) { 
           	@c_cmp(funct7_i, 0) { c_instr_i_srli_s2; }
           	@c_cmp(funct7_i, 32) { c_instr_i_srai_s2; } }
         @c_cmp(funct3_i, 6) { c_instr_i_ori_s2; }
         @c_cmp(funct3_i, 7) { c_instr_i_andi_s2; } }
      @c_cmp(opcode_i, 7'b0100011) {
         @c_cmp(funct3_i, 0) { c_instr_i_sb_s2; }
         @c_cmp(funct3_i, 1) { c_instr_i_sh_s2; }
         @c_cmp(funct3_i, 2) { c_instr_i_sw_s2; } }
      @c_cmp(opcode_i, 7'b0110011) {
         @c_cmp(funct3_i, 0) {
           	@c_cmp(funct7_i, 0) { c_instr_i_add_s2; }
           	@c_cmp(funct7_i, 32) { c_instr_i_sub_s2; } }
         @c_cmp(funct3_i, 1) {
           	@c_cmp(funct7_i, 0) { c_instr_i_sll_s2; } }
         @c_cmp(funct3_i, 2) {
           	@c_cmp(funct7_i, 0) { c_instr_i_slt_s2; } }
         @c_cmp(funct3_i, 3) {
           	@c_cmp(funct7_i, 0)  { c_instr_i_sltu_s2; } }
         @c_cmp(funct3_i, 4) { @c_cmp(funct7_i, 0)  { c_instr_i_xor_s2; } }
         @c_cmp(funct3_i, 5) {
           	@c_cmp(funct7_i, 0)  { c_instr_i_srl_s2; }
           	@c_cmp(funct7_i, 32) { c_instr_i_sra_s2; } }
         @c_cmp(funct3_i, 6) { @c_cmp(funct7_i, 0)  { c_instr_i_or_s2; } }
     	   @c_cmp(funct3_i, 7) { @c_cmp(funct7_i, 0)  { c_instr_i_and_s2; } } }
      @c_cmp(opcode_i, 7'b1100011) {
         @c_cmp(funct3_i, 0) { c_instr_i_beq_s2; }
         @c_cmp(funct3_i, 1) { c_instr_i_bne_s2; }
         @c_cmp(funct3_i, 4) { c_instr_i_blt_s2; }
         @c_cmp(funct3_i, 5) { c_instr_i_bge_s2; }
         @c_cmp(funct3_i, 6) { c_instr_i_bltu_s2; }
         @c_cmp(funct3_i, 7) { c_instr_i_bgeu_s2; } } 
      @c_cmp(opcode_i, 7'b1110011) {
         @c_cmp(funct3_i, 0) { c_instr_i_fence_s2; } }
      @c_cmp(opcode_i, 7'b1110011) {
         @c_cmp(instr_s2[31:7], 25'h000000) { c_instr_i_ecall_s2; }
         @c_cmp(instr_s2[31:7], 25'h002000) { c_instr_i_ebreak_s2; } } }
} ">
<" cl_rv32m_dec {
   ///////////////////////////////////////////// 
   // M conditions 
   ///////////////////////////////////////////// 
   c_instr_m_mul_s1;
   c_instr_m_mulh_s1;
   c_instr_m_mulhu_s1;
   c_instr_m_mulhsu_s1;
   c_instr_m_div_s1;
   c_instr_m_divu_s1;
   c_instr_m_rem_s1;
   c_instr_m_remu_s1;
   c_instr_m_mul_s2;
   c_instr_m_mulh_s2;
   c_instr_m_mulhu_s2;
   c_instr_m_mulhsu_s2;
   c_instr_m_div_s2;
   c_instr_m_divu_s2;
   c_instr_m_rem_s2;
   c_instr_m_remu_s2;
   ///////////////////////////////////////////// 
   // M decode 
   ///////////////////////////////////////////// 
   tr_m_decode_s1 {
      @c_cmp(opcode_i_s1, 7'b0110011) {
         @c_cmp(funct7_i_s1, 7'b0000001) { 
            @c_cmp(funct3_i_s1, 0) { c_instr_m_mul_s1; }
            @c_cmp(funct3_i_s1, 1) { c_instr_m_mulh_s1; }
            @c_cmp(funct3_i_s1, 2) { c_instr_m_mulhsu_s1; }
            @c_cmp(funct3_i_s1, 3) { c_instr_m_mulhu_s1; }
            @c_cmp(funct3_i_s1, 4) { c_instr_m_div_s1; }
            @c_cmp(funct3_i_s1, 5) { c_instr_m_divu_s1; }
            @c_cmp(funct3_i_s1, 6) { c_instr_m_rem_s1; }
            @c_cmp(funct3_i_s1, 7) { c_instr_m_remu_s1; } } } }
   tr_m_decode_s2 {
      @c_cmp(opcode_i, 7'b0110011) {
         @c_cmp(funct7_i, 7'b0000001) { 
            @c_cmp(funct3_i, 0) { c_instr_m_mul_s2; }
            @c_cmp(funct3_i, 1) { c_instr_m_mulh_s2; }
            @c_cmp(funct3_i, 2) { c_instr_m_mulhsu_s2; }
            @c_cmp(funct3_i, 3) { c_instr_m_mulhu_s2; }
            @c_cmp(funct3_i, 4) { c_instr_m_div_s2; }
            @c_cmp(funct3_i, 5) { c_instr_m_divu_s2; }
            @c_cmp(funct3_i, 6) { c_instr_m_rem_s2; }
            @c_cmp(funct3_i, 7) { c_instr_m_remu_s2; } } } }
} ">
<" cl_rv32m {
   ///////////////////////////////////////////// 
   // M transactions
   ///////////////////////////////////////////// 
   tr_rv32m { 
      tr_rv32m_mul; 
      tr_rv32m_mulh; 
      tr_rv32m_mulhu; 
      tr_rv32m_mulhsu; 
      tr_rv32m_div; 
      tr_rv32m_divu; 
      tr_rv32m_rem; 
      tr_rv32m_remu; } 
   ///////////////////////////////////////////// 
   // M conditions and datapaths 
   ///////////////////////////////////////////// 
   tr_rv32m_math {
      d_rs1i_addr; 
      d_rs2i_addr; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      /* d_pc4; */ }
   ///////////////////////////////////////////// 
   // MUL 
   ///////////////////////////////////////////// 
   item [63:0] i_m_mul = rs1_dato * rs2_dato; 
   d_mul { dp_out = i_m_mul[31:0]; }
   tr_rv32m_mul { @c_instr_m_mul { 
      d_mul; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // MULH 
   ///////////////////////////////////////////// 
   item [63:0] i_m_mulh = $signed(rs1_dato) * $signed(rs2_dato); 
   d_mulh { dp_out = i_m_mulh[63:32]; }
   tr_rv32m_mulh { @c_instr_m_mulh { 
      d_mulh; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // MULHU 
   ///////////////////////////////////////////// 
   item [63:0] i_m_mulhu = rs1_dato * rs2_dato; 
   d_mulhu { dp_out = i_m_mulhu[63:32]; }
   tr_rv32m_mulhu { @c_instr_m_mulhu { 
      d_mulhu; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // MULHSU 
   ///////////////////////////////////////////// 
   item [63:0] i_m_mulhsu = {{32{rs1_dato[31]}}, rs1_dato} * {32'h00000000, rs2_dato};
   d_mulhsu { dp_out = i_m_mulhsu[63:32]; }
   tr_rv32m_mulhsu { @c_instr_m_mulhsu { 
      d_mulhsu; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // DIV 
   ///////////////////////////////////////////// 
   d_div { dp_out = $signed(rs1_dato) / $signed(rs2_dato); }
   tr_rv32m_div { @c_instr_m_div { 
      d_div; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // DIVU 
   ///////////////////////////////////////////// 
   d_divu { dp_out = rs1_dato / rs2_dato; }
   tr_rv32m_divu { @c_instr_m_divu { 
      d_divu; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // REM 
   ///////////////////////////////////////////// 
   d_rem { dp_out = $signed(rs1_dato) % $signed(rs2_dato); }
   tr_rv32m_rem { @c_instr_m_rem { 
      d_rem; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // REMU 
   ///////////////////////////////////////////// 
   d_remu { dp_out = rs1_dato % rs2_dato; }
   tr_rv32m_remu { @c_instr_m_remu { 
      d_remu; 
      tr_rv32m_math; } } 
} ">
<" cl_rv32c {
   ///////////////////////////////////////////// 
   // C transactions 
   ///////////////////////////////////////////// 
   tr_rv32c { 
      tr_rv32c_addi4sp; 
      tr_rv32c_lw; 
      tr_rv32c_sw; 
      tr_rv32c_nop; 
      tr_rv32c_addi; 
      tr_rv32c_jal; 
      tr_rv32c_li; 
      tr_rv32c_lui; 
      tr_rv32c_addi16sp; 
      tr_rv32c_srli; 
      tr_rv32c_srai; 
      tr_rv32c_andi; 
      tr_rv32c_sub; 
      tr_rv32c_xor; 
      tr_rv32c_or; 
      tr_rv32c_and; 
      tr_rv32c_j; 
      tr_rv32c_beqz; 
      tr_rv32c_bnez; 
      tr_rv32c_slli; 
      tr_rv32c_lwsp; 
      tr_rv32c_jr; 
      tr_rv32c_mv; 
      tr_rv32c_ebreak; 
      tr_rv32c_jalr; 
      tr_rv32c_add; 
      tr_rv32c_swsp; } 
   ///////////////////////////////////////////// 
   // Formats 
   ///////////////////////////////////////////// 
   item [2] opcode_c_s1 = instr_s1[1:0];
   item [3] funct3_c_s1 = instr_s1[15:13];
   item [3] funct2_c_s1 = instr_s1[6:5];
   item [2] opcode_c = instr_s2[1:0];
   item [3] funct3_c = instr_s2[15:13];
   item [3] funct2_c = instr_s2[6:5];
   //d_pc2 { pc_next = pc + 2; } 
   d_rs1_c_addr { rs1_addr = instr_s1[11:7]; }
   d_rs1sp_c_addr { rs1_addr = 2; }
   d_rs1a1_c_addr { rs1_addr = {2'b01, instr_s1[9:7]}; }
   d_rs2_c_addr { rs2_addr = instr_s1[6:2]; }
   d_rs2a1_c_addr { rs2_addr = {2'b01, instr_s1[4:2]}; }
   d_rd_c_addr { rd_addr = instr_s2[11:7]; }
   d_rda1_c_addr { rd_addr = {2'b01, instr_s2[4:2]}; }
   d_rda2_c_addr { rd_addr = {2'b01, instr_s2[9:7]}; }
   ///////////////////////////////////////////// 
   // Load 
   ///////////////////////////////////////////// 
   item [31:0] offset_c = {{26{1'b0}}, instr_s2[5], instr_s2[12:10], instr_s2[6], 2'b00};
   d_load_lw_c { dp_out = dmem_load_data; }
   //d_dmem_load_addr_c { dmem_load_addr = offset_c + rs1_dato; }
   d_dmem_load_addr_c { i_add_a = rs1_dato;
                        i_add_b = offset_c; 
                        dmem_load_addr = dp_add; }
   d_dmem_load_width_c { dmem_load_width = 2; }
   tr_rv32c_load {
     d_dmem_load_width_c; 
     c_dmem_load; 
     d_load_lw_c ; 
     d_rd_dp_out; c_rf_write; 
     /* d_pc2; */ } 
   ///////////////////////////////////////////// 
   // C.LWSP 
   ///////////////////////////////////////////// 
   item [31:0] offset_lwsp_c = {{26{1'b0}}, instr_s2[3:2], instr_s2[12], instr_s2[6:4], 2'b00};
   //d_dmem_load_addr_lwsp_c { dmem_load_addr = offset_lwsp_c + rs1_dato; }
   d_dmem_load_addr_lwsp_c { i_add_a = rs1_dato;
                             i_add_b = offset_lwsp_c; 
                             dmem_load_addr = dp_add; }
   tr_rv32c_lwsp { 
      @c_instr_c_lwsp_s1 {
         d_rs1sp_c_addr; }
      @c_instr_c_lwsp_s2 {
         d_dmem_load_addr_lwsp_c; 
         d_rd_c_addr; 
         tr_rv32c_load; } } 
   ///////////////////////////////////////////// 
   // Store 
   ///////////////////////////////////////////// 
   //d_dmem_store_addr_c { dmem_store_addr = offset_c + rs1_dato; }
   d_dmem_store_addr_c { i_add_a = rs1_dato;
                         i_add_b = offset_c; 
                         dmem_store_addr = dp_add; }
   d_dmem_store_width_c { dmem_store_width = 2; }
   d_dmem_store_data_c { dmem_store_data = rs2_dato; }
   tr_rv32c_store { 
      d_dmem_store_width_c; 
      c_dmem_store; 
      d_dmem_store_data_c; 
      /* d_pc2; */ }
   ///////////////////////////////////////////// 
   // C.SWSP 
   ///////////////////////////////////////////// 
   item [31:0] offset_swsp_c = {{25{1'b0}}, instr_s2[8:7], instr_s2[12:9], 2'b00};
   //d_dmem_store_addr_sp_c { dmem_store_addr = offset_swsp_c + rs1_dato; }
   d_dmem_store_addr_sp_c { i_add_a = rs1_dato;
                            i_add_b = offset_swsp_c; 
                            dmem_store_addr = dp_add; }
   tr_rv32c_swsp { 
      @c_instr_c_swsp_s1 { 
         d_rs1sp_c_addr; 
         d_rs2_c_addr; }
      @c_instr_c_swsp_s2 { 
         d_dmem_store_addr_sp_c; 
         tr_rv32c_store; } } 
   ///////////////////////////////////////////// 
   // C.LW 
   ///////////////////////////////////////////// 
   tr_rv32c_lw { 
      @c_instr_c_lw_s1 {
         d_rs1a1_c_addr; }
      @c_instr_c_lw_s2 {
         d_dmem_load_addr_c; 
         d_rda1_c_addr;
         tr_rv32c_load; } } 
   ///////////////////////////////////////////// 
   // C.SW 
   ///////////////////////////////////////////// 
   tr_rv32c_sw { 
      @c_instr_c_sw_s1 { 
         d_rs1a1_c_addr; 
         d_rs2a1_c_addr; }
      @c_instr_c_sw_s2 { 
         d_dmem_store_addr_c; 
         tr_rv32c_store; } } 
   ///////////////////////////////////////////// 
   // C.J 
   ///////////////////////////////////////////// 
   item [31:0] imm_j_c = {{26{instr_s2[12]}}, instr_s2[12], instr_s2[8], 
            instr_s2[10:9], instr_s2[6], instr_s2[7], instr_s2[2], instr_s2[11], instr_s2[5:3], 1'b0};
   //d_pc_j_c { pc_next = pc + imm_j_c; }
   d_pc_j_c { i_add_a = pc - pc_clear;
              i_add_b = imm_j_c; 
              pc_next = dp_add; }
   tr_rv32c_j { 
      @c_instr_c_j_s2 {
         c_pipe_invalid;
         d_pc_j_c; } } 
   ///////////////////////////////////////////// 
   // C.JAL 
   ///////////////////////////////////////////// 
   item [31:0] imm_jal_c = {{26{instr_s2[12]}}, instr_s2[12], instr_s2[8], 
            instr_s2[10:9], instr_s2[6], instr_s2[7], instr_s2[2], instr_s2[11], instr_s2[5:3], 1'b0};
   d_jal_c { dp_out = pc - pc_clear + 2; }
   d_rd_link_c_addr { rd_addr = 1; }
   tr_rv32c_jal { 
      @c_instr_c_jal_s2 {
         d_jal_c; 
         d_rd_dp_out; d_rd_link_c_addr; c_rf_write;  
         c_pipe_invalid;
         d_pc_j_c; } } 
   ///////////////////////////////////////////// 
   // C.JR 
   ///////////////////////////////////////////// 
   d_pc_jr_c { pc_next = rs1_dato; }
   tr_rv32c_jr { 
      @c_instr_c_jr_s1 { 
         d_rs1_c_addr; }
      @c_instr_c_jr_s2 { 
         c_pipe_invalid;
         d_pc_jr_c; } } 
   ///////////////////////////////////////////// 
   // C.JALR 
   ///////////////////////////////////////////// 
   d_pc_jalr_c { pc_next = rs1_dato; }
   //d_jalr_c { dp_out = pc + 2; }
   d_jalr_c { i_add_a = pc - pc_clear;
              i_add_b = 2; 
              dp_out = dp_add; }
   tr_rv32c_jalr { 
      @c_instr_c_jalr_s1 { 
         d_rs1_c_addr; }
      @c_instr_c_jalr_s2 { 
         d_jalr_c; 
         d_rd_dp_out; d_rd_link_c_addr; c_rf_write;  
         c_pipe_invalid;
         d_pc_jalr_c; } } 
   ///////////////////////////////////////////// 
   // C.BEQZ 
   ///////////////////////////////////////////// 
   item [31:0] sign_ext_imm8_c = {{26{instr_s2[12]}}, instr_s2[12], 
            instr_s2[6:5], instr_s2[2], instr_s2[11:10], instr_s2[4:3], 1'b0};
   //d_pc_branch_c { pc_next = pc + sign_ext_imm8_c; }
   d_pc_branch_c { i_add_a = pc - pc_clear;
                   i_add_b = sign_ext_imm8_c; 
                   pc_next = dp_add; }
   c_cond_beqz_c { if (rs1_dato == 0) this; }
   tr_rv32c_beqz { 
      @c_instr_c_beqz_s1 { 
         d_rs1a1_c_addr; }
      @c_instr_c_beqz_s2 { 
         @c_cond_beqz_c { 
            c_pipe_invalid;
            d_pc_branch_c; }
         else { /* d_pc2; */ } } } 
   ///////////////////////////////////////////// 
   // C.BNEZ 
   ///////////////////////////////////////////// 
   c_cond_bnez_c { if (rs1_dato != 0) this; }
   tr_rv32c_bnez { 
      @c_instr_c_bnez_s1 { 
         d_rs1a1_c_addr; }
      @c_instr_c_bnez_s2 { 
         @c_cond_bnez_c { 
            c_pipe_invalid;
            d_pc_branch_c; }
         else { /* d_pc2; */ } } } 
   ///////////////////////////////////////////// 
   // C.LI
   ///////////////////////////////////////////// 
   d_li_c { dp_out = {{26{instr_s2[12]}}, instr_s2[12], instr_s2[6:2]}; }
   tr_rv32c_li { 
      @c_instr_c_li_s2 { 
         d_li_c; 
         d_rd_dp_out; d_rd_c_addr; c_rf_write;  
         /* d_pc2; */ } } 
   ///////////////////////////////////////////// 
   // C.LUI 
   ///////////////////////////////////////////// 
   d_lui_c { dp_out = {{14{instr_s2[12]}}, instr_s2[12], instr_s2[6:2], 12'h000}; }
   tr_rv32c_lui { 
      @c_instr_c_lui_s2 { 
         d_lui_c; 
         d_rd_dp_out; d_rd_c_addr; c_rf_write;  
         /* d_pc2; */ } } 
   ///////////////////////////////////////////// 
   // Register-Immediate 
   ///////////////////////////////////////////// 
   tr_rv32c_reg_imm {
      d_rd_dp_out; c_rf_write;  
      /* d_pc2; */ }
   item [31:0] sign_ext_imm6 = {{26{instr_s2[12]}}, instr_s2[12], instr_s2[6:2]};
   item [31:0] sign_ext_imm6_s1 = {{26{instr_s1[12]}}, instr_s1[12], instr_s1[6:2]};
   item [31:0] sign_ext_imm6_sp = {{22{instr_s2[12]}}, instr_s2[12],
            instr_s2[4:3], instr_s2[5], instr_s2[2], instr_s2[6], 4'h0};
   ///////////////////////////////////////////// 
   // C.ADDI
   ///////////////////////////////////////////// 
   //d_c_addi { dp_out = rs1_dato + sign_ext_imm6; }
   d_c_addi { i_add_a = rs1_dato;
              i_add_b = sign_ext_imm6;
              dp_out = dp_add; }
   tr_rv32c_addi { 
      @c_instr_c_addi_s1 {
         d_rs1_c_addr; }
      @c_instr_c_addi_s2 {
         d_c_addi; 
         d_rd_c_addr;
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.ADDI16SP
   ///////////////////////////////////////////// 
   //d_c_addi16sp { dp_out = rs1_dato + sign_ext_imm6_sp; }
   d_c_addi16sp { i_add_a = rs1_dato;
                  i_add_b = sign_ext_imm6_sp;
                  dp_out = dp_add; }
   tr_rv32c_addi16sp { 
      @c_instr_c_addi16sp_s1 { 
         d_rs1_c_addr; }
      @c_instr_c_addi16sp_s2 { 
         d_c_addi16sp; 
         d_rd_c_addr;
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.ADDI4SP 
   ///////////////////////////////////////////// 
   item [31:0] sign_ext_imm8 = {{22{instr_s2[10]}}, instr_s2[10:7],
            instr_s2[12:11], instr_s2[5], instr_s2[6], 2'b00};
   //d_c_addi4sp { dp_out = rs1_dato + sign_ext_imm8; }
   d_c_addi4sp { i_add_a = rs1_dato;
                 i_add_b = sign_ext_imm8;
                 dp_out = dp_add; }
   tr_rv32c_addi4sp { 
      @c_instr_c_addi4sp_s1 { 
         d_rs1sp_c_addr; }
      @c_instr_c_addi4sp_s2 { 
         d_c_addi4sp; 
         d_rda1_c_addr; 
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.SLLI 
   ///////////////////////////////////////////// 
   item [5:0] i_shamt_c = {instr_s2[12], instr_s2[6:2]};
   //d_c_slli { dp_out = rs1_dato << i_shamt_c; }
   d_c_slli { i_shl_data = rs1_dato;
              i_shl_shamt = i_shamt_c;
              dp_out = shl_result; }
   tr_rv32c_slli { 
      @c_instr_c_slli_s1 { 
         d_rs1_c_addr; }
      @c_instr_c_slli_s2 { 
         d_c_slli; 
         d_rd_c_addr; 
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.SRLI 
   ///////////////////////////////////////////// 
   //d_c_srli { dp_out = rs1_dato >> i_shamt_c; }
   d_c_srli { i_sra_data = {1'b0, rs1_dato};
              i_sra_shamt = i_shamt_c;
              dp_out = sra_result[31:0]; }
   tr_rv32c_srli { 
      @c_instr_c_srli_s1 { 
         d_rs1a1_c_addr; }
      @c_instr_c_srli_s2 { 
         d_c_srli; 
         d_rda2_c_addr;
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.SRAI 
   ///////////////////////////////////////////// 
   //d_c_srai { dp_out = $signed(rs1_dato) >>> i_shamt_c; }
   d_c_srai { i_sra_data = {rs1_dato[31], rs1_dato};
              i_sra_shamt = i_shamt_c;
              dp_out = sra_result[31:0]; }
   tr_rv32c_srai { 
      @c_instr_c_srai_s1 { 
         d_rs1a1_c_addr; }
      @c_instr_c_srai_s2 { 
         d_c_srai; 
         d_rda2_c_addr;
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.ANDI 
   ///////////////////////////////////////////// 
   d_c_andi { dp_out = rs1_dato & sign_ext_imm6; }
   tr_rv32c_andi { 
      @c_instr_c_andi_s1 { 
         d_rs1a1_c_addr; }
      @c_instr_c_andi_s2 { 
         d_c_andi; 
         d_rda2_c_addr;
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.ADD 
   ///////////////////////////////////////////// 
   //d_c_add { dp_out = rs1_dato + rs2_dato; }
   d_c_add { i_add_a = rs1_dato;
             i_add_b = rs2_dato;
             dp_out = dp_add; }
   tr_rv32c_add { 
      @c_instr_c_add_s1 { 
         d_rs1_c_addr; 
         d_rs2_c_addr; }
      @c_instr_c_add_s2 { 
         d_c_add; 
         d_rd_c_addr;
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.MV 
   ///////////////////////////////////////////// 
   d_c_mv { dp_out = rs2_dato; }
   tr_rv32c_mv { 
      @c_instr_c_mv_s1 { 
         d_rs2_c_addr; }
      @c_instr_c_mv_s2 { 
         d_c_mv; 
         d_rd_c_addr;
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.AND 
   ///////////////////////////////////////////// 
   //d_c_and { dp_out = rs1_dato & rs2_dato; }
   tr_rv32c_and { 
      @c_instr_c_and_s1 { 
         d_rs1a1_c_addr; 
         d_rs2a1_c_addr; }
      @c_instr_c_and_s2 { 
         d_and; 
         d_rda2_c_addr;
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.OR 
   ///////////////////////////////////////////// 
   //d_c_or { dp_out = rs1_dato | rs2_dato; }
   tr_rv32c_or { 
      @c_instr_c_or_s1 { 
         d_rs1a1_c_addr; 
         d_rs2a1_c_addr; }
      @c_instr_c_or_s2 { 
         d_or; 
         d_rda2_c_addr;
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.XOR 
   ///////////////////////////////////////////// 
   //d_c_xor { dp_out = rs1_dato ^ rs2_dato; }
   tr_rv32c_xor { 
      @c_instr_c_xor_s1 { 
         d_rs1a1_c_addr; 
         d_rs2a1_c_addr; }
      @c_instr_c_xor_s2 { 
         d_xor; 
         d_rda2_c_addr;
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.SUB 
   ///////////////////////////////////////////// 
   //d_c_sub { dp_out = rs1_dato - rs2_dato; }
   d_c_sub { i_add_a = rs1_dato;
             i_add_b = d_sub_2compl;
             i_sub_b = rs2_dato;
             dp_out = dp_add; }
   tr_rv32c_sub { 
      @c_instr_c_sub_s1 { 
         d_rs1a1_c_addr; 
         d_rs2a1_c_addr; }
      @c_instr_c_sub_s2 { 
         d_c_sub; 
         d_rda2_c_addr; 
         tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.NOP 
   ///////////////////////////////////////////// 
   tr_rv32c_nop { 
      @c_instr_c_nop_s2 { 
         /* d_pc2; */ } } 
   ///////////////////////////////////////////// 
   // C.EBREAK 
   ///////////////////////////////////////////// 
   tr_rv32c_ebreak { 
      @c_instr_c_ebreak_s2 { 
         /* d_pc2; */ } } 
} ">
<" cl_rv32c_list { 
   ///////////////////////////////////////////// 
   // C conditions 
   ///////////////////////////////////////////// 
   c_instr_c_addi4sp_s1;
   c_instr_c_lw_s1;
   c_instr_c_sw_s1;
   c_instr_c_nop_s1;
   c_instr_c_addi_s1; 
   c_instr_c_jal_s1;
   c_instr_c_li_s1;
   c_instr_c_lui_s1;
   c_instr_c_addi16sp_s1;
   c_instr_c_srli_s1;
   c_instr_c_srai_s1;
   c_instr_c_andi_s1;
   c_instr_c_sub_s1;
   c_instr_c_xor_s1;
   c_instr_c_or_s1;
   c_instr_c_and_s1;
   c_instr_c_j_s1;
   c_instr_c_beqz_s1;
   c_instr_c_bnez_s1;
   c_instr_c_slli_s1;
   c_instr_c_lwsp_s1;
   c_instr_c_jr_s1;
   c_instr_c_mv_s1;
   c_instr_c_ebreak_s1;
   c_instr_c_jalr_s1;
   c_instr_c_add_s1;
   c_instr_c_swsp_s1;
   ///////////////////////////////////////////// 
   // C conditions 
   ///////////////////////////////////////////// 
   c_instr_c_addi4sp_s2;
   c_instr_c_lw_s2;
   c_instr_c_sw_s2;
   c_instr_c_nop_s2;
   c_instr_c_addi_s2; 
   c_instr_c_jal_s2;
   c_instr_c_li_s2;
   c_instr_c_lui_s2;
   c_instr_c_addi16sp_s2;
   c_instr_c_srli_s2;
   c_instr_c_srai_s2;
   c_instr_c_andi_s2;
   c_instr_c_sub_s2;
   c_instr_c_xor_s2;
   c_instr_c_or_s2;
   c_instr_c_and_s2;
   c_instr_c_j_s2;
   c_instr_c_beqz_s2;
   c_instr_c_bnez_s2;
   c_instr_c_slli_s2;
   c_instr_c_lwsp_s2;
   c_instr_c_jr_s2;
   c_instr_c_mv_s2;
   c_instr_c_ebreak_s2;
   c_instr_c_jalr_s2;
   c_instr_c_add_s2;
   c_instr_c_swsp_s2;
   //c_c_op_0 { if (instr_s2[1:0] == 2'b00) this; }
   //c_c_op_1 { if (instr_s2[1:0] == 2'b01) this; }
   //c_c_op_2 { if (instr_s2[1:0] == 2'b10) this; }
   c_c_rd_not_x0 { if (instr_s2[11:7] != 5'b00000) this; }
   c_c_rd_not_x0_s1 { if (instr_s1[11:7] != 5'b00000) this; }
   c_c_rd_not_x2 { if (instr_s2[11:7] != 5'b00010) this; }
   c_c_rd_not_x2_s1 { if (instr_s1[11:7] != 5'b00010) this; }
   c_c_rs1_x0 { if (instr_s2[11:7] == 5'b00000) this; }
   c_c_rs1_x0_s1 { if (instr_s1[11:7] == 5'b00000) this; }
   c_c_rs1_not_x0 { if (instr_s2[11:7] != 5'b00000) this; }
   c_c_rs1_not_x0_s1 { if (instr_s1[11:7] != 5'b00000) this; }
   c_c_rs2_x0 { if (instr_s2[6:2] == 5'b00000) this; }
   c_c_rs2_x0_s1 { if (instr_s1[6:2] == 5'b00000) this; }
   c_c_rs2_not_x0 { if (instr_s2[6:2] != 5'b00000) this; }
   c_c_rs2_not_x0_s1 { if (instr_s1[6:2] != 5'b00000) this; }
   c_c_nzimm_not_x0 { if ( sign_ext_imm6 != 32'h00000000) this; }
   c_c_nzimm_not_x0_s1 { if ( sign_ext_imm6_s1 != 32'h00000000) this; }
   //c_c_nzimm_sp_not_x0 { if ( sign_ext_imm6_sp != 32'h00000000) this; }
} ">
<" cl_rv32c_dec_op0 {
   ///////////////////////////////////////////// 
   // Quadrant 0 decode 
   ///////////////////////////////////////////// 
   tr_c_decode_op_0_s1 {
     	@c_cmp(opcode_c_s1, 0) {
     	  	@c_cmp(funct3_c_s1, 0) { c_instr_c_addi4sp_s1; }
     	  	@c_cmp(funct3_c_s1, 2) { c_instr_c_lw_s1; }
     	  	@c_cmp(funct3_c_s1, 6) { c_instr_c_sw_s1; } } }
   tr_c_decode_op_0_s2 {
     	@c_cmp(opcode_c, 0) {
     	  	@c_cmp(funct3_c, 0) { c_instr_c_addi4sp_s2; }
     	  	@c_cmp(funct3_c, 2) { c_instr_c_lw_s2; }
     	  	@c_cmp(funct3_c, 6) { c_instr_c_sw_s2; } } }
} ">
<" cl_rv32c_dec_op1 {
   ///////////////////////////////////////////// 
   // Quadrant 1 decode 
   ///////////////////////////////////////////// 
   tr_c_decode_op_1_s1 {
      @c_cmp(opcode_c_s1, 1) {
     	 @c_cmp(funct3_c_s1, 0) {
          	@c_c_rs1_x0_s1 { c_instr_c_nop_s1; }
          	@c_c_nzimm_not_x0_s1 {
             	@c_c_rd_not_x0_s1 { c_instr_c_addi_s1; } } }
         @c_cmp(funct3_c_s1, 1) { c_instr_c_jal_s1; }
         @c_cmp(funct3_c_s1, 2) { c_instr_c_li_s1; }
         @c_cmp(funct3_c_s1, 3) {
            @c_c_rd_not_x0_s1 {
               @c_c_rd_not_x2_s1 { c_instr_c_lui_s1; } }
        	  @c_cmp(instr_s1[11:7], 2) { c_instr_c_addi16sp_s1; } }
         @c_cmp(funct3_c_s1, 4) {
            @c_cmp(instr_s1[11:10], 0) { c_instr_c_srli_s1; }
            @c_cmp(instr_s1[11:10], 1) { c_instr_c_srai_s1; }
            @c_cmp(instr_s1[11:10], 2) { c_instr_c_andi_s1; }
            @c_cmp(instr_s1[11:10], 3) { 
               @c_cmp(instr_s1[12], 0) { 
                  @c_cmp(instr_s1[6:5], 0) { c_instr_c_sub_s1; }
                  @c_cmp(instr_s1[6:5], 1) { c_instr_c_xor_s1; }
                  @c_cmp(instr_s1[6:5], 2) { c_instr_c_or_s1; }
                  @c_cmp(instr_s1[6:5], 3) { c_instr_c_and_s1; } } } }
         @c_cmp(funct3_c_s1, 5) { c_instr_c_j_s1; }
         @c_cmp(funct3_c_s1, 6) { c_instr_c_beqz_s1; }
         @c_cmp(funct3_c_s1, 7) { c_instr_c_bnez_s1; } } }
   tr_c_decode_op_1_s2 {
      @c_cmp(opcode_c, 1) {
        	@c_cmp(funct3_c, 0) {
        	  	@c_c_rs1_x0 { c_instr_c_nop_s2; }
        	  	@c_c_nzimm_not_x0 {
        	     	@c_c_rd_not_x0 { c_instr_c_addi_s2; } } }
         @c_cmp(funct3_c, 1) { c_instr_c_jal_s2; }
         @c_cmp(funct3_c, 2) { c_instr_c_li_s2; }
         @c_cmp(funct3_c, 3) {
            @c_c_rd_not_x0 {
               @c_c_rd_not_x2 { c_instr_c_lui_s2; } }
        	  @c_cmp(instr_s2[11:7], 2) { c_instr_c_addi16sp_s2; } }
         @c_cmp(funct3_c, 4) {
            @c_cmp(instr_s2[11:10], 0) { c_instr_c_srli_s2; }
            @c_cmp(instr_s2[11:10], 1) { c_instr_c_srai_s2; }
            @c_cmp(instr_s2[11:10], 2) { c_instr_c_andi_s2; }
            @c_cmp(instr_s2[11:10], 3) { 
               @c_cmp(instr_s2[12], 0) { 
                  @c_cmp(instr_s2[6:5], 0) { c_instr_c_sub_s2; }
                  @c_cmp(instr_s2[6:5], 1) { c_instr_c_xor_s2; }
                  @c_cmp(instr_s2[6:5], 2) { c_instr_c_or_s2; }
                  @c_cmp(instr_s2[6:5], 3) { c_instr_c_and_s2; } } } }
         @c_cmp(funct3_c, 5) { c_instr_c_j_s2; }
         @c_cmp(funct3_c, 6) { c_instr_c_beqz_s2; }
         @c_cmp(funct3_c, 7) { c_instr_c_bnez_s2; } } }
} ">
<" cl_rv32c_dec_op2 {
   ///////////////////////////////////////////// 
   // Quadrant 2 decode 
   ///////////////////////////////////////////// 
   tr_c_decode_op_2_s1 {
      @c_cmp(opcode_c_s1, 2) {
         @c_cmp(funct3_c_s1, 0) {
           @c_c_rd_not_x0_s1 { c_instr_c_slli_s1; } }
         @c_cmp(funct3_c_s1, 2) { c_instr_c_lwsp_s1; }
         @c_cmp(funct3_c_s1, 4) {
            @c_cmp(instr_s1[12], 0) {
               @c_c_rs1_not_x0_s1 {
                  @c_c_rs2_x0_s1 { c_instr_c_jr_s1; } }
               @c_c_rd_not_x0_s1 {
                  @c_c_rs2_not_x0_s1 { c_instr_c_mv_s1; } } }
            @c_cmp(instr_s1[12], 1) {
               @c_c_rs1_x0_s1 {
                  @c_c_rs2_x0_s1 { c_instr_c_ebreak_s1; } }
               @c_c_rs1_not_x0_s1 {
                  @c_c_rs2_x0_s1 { c_instr_c_jalr_s1; } }
               @c_c_rd_not_x0_s1 {
                  @c_c_rs1_not_x0_s1 {
                     @c_c_rs2_not_x0_s1 { c_instr_c_add_s1; } } } } }
         @c_cmp(funct3_c_s1, 6) { c_instr_c_swsp_s1; } } }
   tr_c_decode_op_2_s2 {
      @c_cmp(opcode_c, 2) {
         @c_cmp(funct3_c, 0) {
           @c_c_rd_not_x0 { c_instr_c_slli_s2; } }
         @c_cmp(funct3_c, 2) { c_instr_c_lwsp_s2; }
         @c_cmp(funct3_c, 4) {
            @c_cmp(instr_s2[12], 0) {
               @c_c_rs1_not_x0 {
                  @c_c_rs2_x0 { c_instr_c_jr_s2; } }
               @c_c_rd_not_x0 {
                  @c_c_rs2_not_x0 { c_instr_c_mv_s2; } } }
            @c_cmp(instr_s2[12], 1) {
               @c_c_rs1_x0 {
                  @c_c_rs2_x0 { c_instr_c_ebreak_s2; } }
               @c_c_rs1_not_x0 {
                  @c_c_rs2_x0 { c_instr_c_jalr_s2; } }
               @c_c_rd_not_x0 {
                  @c_c_rs1_not_x0 {
                     @c_c_rs2_not_x0 { c_instr_c_add_s2; } } } } }
         @c_cmp(funct3_c, 6) { c_instr_c_swsp_s2; } } }
} ">


   Copyright 2024 Tobias Strauch, Munich, Bavaria
   Licensed under the Apache License, Version 2.0, see LICENSE for details.
   SPDX-License-Identifier: Apache-2.0

   Minimalistic GPIO implementation with 8-bit wide
   direction, output-value, trisate and input registers.

<"
cluster c_gpio {      

   //////////////////////////////////////////////
   // AXI slave write interface                               
   //////////////////////////////////////////////
   item (* AXI_SLV_AWADDR *) [31:0] slv_wr_addr;
   item (* AXI_SLV_AWDATA *) [31:0] slv_wr_data;
   (* AXI_SLV_AWVALID *) c_slv_wr;

   //////////////////////////////////////////////
   // AXI slave read interface                               
   //////////////////////////////////////////////
   item (* AXI_SLV_ARADDR *) [31:0] slv_rd_addr;
   item (* AXI_SLV_ARDATA=DRIVER *) [31:0] slv_rd_data;
   (* AXI_SLV_ARVALID *) c_slv_rd;
   (* AXI_SLV_ARREADY=DRIVER *) c_slv_rd_ready;

   //////////////////////////////////////////////
   // Basic registers                               
   //////////////////////////////////////////////
   reg [7:0] gpio_data_dir_reg;
   reg [7:0] gpio_data_tri_reg;
   reg [7:0] gpio_data_out_reg;
   reg [7:0] gpio_data_in_reg;
      
   //////////////////////////////////////////////
   // Write mechanism                              
   //////////////////////////////////////////////
   d_data_dir_clr { gpio_data_dir_reg = gpio_data_dir_reg & !slv_wr_data; } 
   d_data_dir_set { gpio_data_dir_reg = gpio_data_dir_reg | slv_wr_data; } 
   d_data_out_clr { gpio_data_out_reg = gpio_data_out_reg & !slv_wr_data; } 
   d_data_out_set { gpio_data_out_reg = gpio_data_out_reg | slv_wr_data; } 
   d_data_tri_clr { gpio_data_tri_reg = gpio_data_tri_reg & !slv_wr_data; }
   d_data_tri_set { gpio_data_tri_reg = gpio_data_tri_reg | slv_wr_data; }
    
   c_data_dir_clr { if (c_slv_wr & (slv_wr_addr == (BASE + OFFSET + 32'h00000000))) this; }	
   c_data_dir_set { if (c_slv_wr & (slv_wr_addr == (BASE + OFFSET + 32'h00000004))) this; }	
   c_data_tri_clr { if (c_slv_wr & (slv_wr_addr == (BASE + OFFSET + 32'h00000008))) this; }	
   c_data_tri_set { if (c_slv_wr & (slv_wr_addr == (BASE + OFFSET + 32'h0000000C))) this; }	
   c_data_out_clr { if (c_slv_wr & (slv_wr_addr == (BASE + OFFSET + 32'h00000010))) this; }	
   c_data_out_set { if (c_slv_wr & (slv_wr_addr == (BASE + OFFSET + 32'h00000014))) this; }	

   //////////////////////////////////////////////
   // Read mechanism                              
   //////////////////////////////////////////////
   c_data_in_rd  { if (c_slv_rd & (slv_rd_addr == (BASE + OFFSET + 32'h00000020))) this; }
   tr_rd { d_data_cap_reg; }

   //////////////////////////////////////////////
   // Collecting further logic
   //////////////////////////////////////////////
   d_reset { gpio_data_dir_reg = 0; 
             gpio_data_tri_reg = 0;
             gpio_data_out_reg = 0; 
             gpio_data_in_reg = 0; }                

   tr_wr { unique { @c_data_dir_clr { d_data_dir_clr; } 
                    @c_data_dir_set { d_data_dir_set; } }
           unique { @c_data_out_clr { d_data_out_clr; } 
                    @c_data_out_set { d_data_out_set; } }
           unique { @c_data_tri_clr { d_data_tri_clr; } 
                    @c_data_tri_set { d_data_tri_set; } } }
}
">

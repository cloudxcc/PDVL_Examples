<" cl_rv32i_rf {
   reg [31:0] rf [15:0]; 
} ">
<" cl_rv32i {
   ///////////////////////////////////////////// 
   // PC 
   ///////////////////////////////////////////// 
   parameter XLEN = 32; 
   parameter PC_LEN = 32; 
   reg [16 : 0] pc; 
   d_pc_reset { pc = 0; } 
   ///////////////////////////////////////////// 
   // Instruction 
   ///////////////////////////////////////////// 
   item [32] instr; 
   ///////////////////////////////////////////// 
   // Formats 
   ///////////////////////////////////////////// 
   item [8] funct7_i = instr[31:25]; 
   item [3] funct3_i = instr[14:12];
   item [5] rs2i = instr[24:20];
   item [5] rs1i = instr[19:15];
   item [5] rdi = instr[11:7];
   item [7] opcode_i = instr[6:0];
   item [12] i_type = instr[31:20];
   item [12] s_type = {instr[31:25], instr[11:7]};
   item [11:0] b_type = {instr[31], instr[7], instr[30:25], instr[11:8]};
   item [19:0] j_type = {instr[31], instr[19:12], instr[20], instr[30:21]};
   item [31:0] i_immediate = {{20{instr[31]}}, instr[31:20]};
   item [31:0] u_immediate = {instr[31:12], 12'h000};
   ///////////////////////////////////////////// 
   // ADDI 
   ///////////////////////////////////////////// 
   d_addi { dp_out = rs1_dato + i_immediate; }
   tr_rv32i_addi { unique @c_instr_i_addi { 
      d_rs1i_addr; 
      d_addi; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // SLTI 
   ///////////////////////////////////////////// 
   d_slti { dp_out = $signed(rs1_dato) < $signed(i_immediate); }
   tr_rv32i_slti { unique @c_instr_i_slti { 
      d_rs1i_addr; 
      d_slti; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // SLTIU 
   ///////////////////////////////////////////// 
   d_sltiu { dp_out = rs1_dato < i_immediate; }
   tr_rv32i_sltiu { unique @c_instr_i_sltiu { 
      d_rs1i_addr; 
      d_sltiu; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // ANDI 
   ///////////////////////////////////////////// 
   d_andi { dp_out = rs1_dato & i_immediate; }
   tr_rv32i_andi { unique @c_instr_i_andi { 
      d_rs1i_addr; 
      d_andi; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // ORI 
   ///////////////////////////////////////////// 
   d_ori { dp_out = rs1_dato | i_immediate; }
   tr_rv32i_ori { unique @c_instr_i_ori { 
      d_rs1i_addr; 
      d_ori; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // XORI 
   ///////////////////////////////////////////// 
   d_xori { dp_out = rs1_dato ^ i_immediate; }
   tr_rv32i_xori { unique @c_instr_i_xori { 
      d_rs1i_addr; 
      d_xori; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // SLLI 
   ///////////////////////////////////////////// 
   item [4:0] shamt = instr[24:20];
   d_slli { dp_out = rs1_dato << shamt; }
   tr_rv32i_slli { unique @c_instr_i_slli { 
      d_rs1i_addr; 
      d_slli; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // SRLI 
   ///////////////////////////////////////////// 
   d_srli { dp_out = rs1_dato >> shamt; }
   tr_rv32i_srli { unique @c_instr_i_srli { 
      d_rs1i_addr; 
      d_srli; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // SRAI 
   ///////////////////////////////////////////// 
   d_srai { dp_out = $signed(rs1_dato) >>> shamt; }
   tr_rv32i_srai { unique @c_instr_i_srai { 
      d_rs1i_addr; 
      d_srai; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // LUI 
   ///////////////////////////////////////////// 
   d_lui { dp_out = u_immediate; }
   tr_rv32i_lui { unique @c_instr_i_lui { 
      d_lui; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // AUIPC 
   ///////////////////////////////////////////// 
   d_auipc { dp_out = pc + u_immediate; }
   tr_rv32i_auipc { unique @c_instr_i_auipc { 
      d_auipc; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // ADD 
   ///////////////////////////////////////////// 
   d_add { dp_out = rs1_dato + rs2_dato; }
   tr_rv32i_add { unique @c_instr_i_add { 
      d_rs1i_addr; d_rs2i_addr; 
      d_add; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // SLT 
   ///////////////////////////////////////////// 
   d_slt { dp_out = $signed(rs1_dato) < $signed(rs2_dato); }
   tr_rv32i_slt { unique @c_instr_i_slt { 
      d_rs1i_addr; d_rs2i_addr; 
      d_slt; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // SLTU 
   ///////////////////////////////////////////// 
   d_sltu { dp_out = rs1_dato < rs2_dato; }
   tr_rv32i_sltu { unique @c_instr_i_sltu { 
      d_rs1i_addr; d_rs2i_addr; 
      d_sltu; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // SUB 
   ///////////////////////////////////////////// 
   d_sub { dp_out = rs1_dato - rs2_dato; }
   tr_rv32i_sub { unique @c_instr_i_sub { 
      d_rs1i_addr; d_rs2i_addr; 
      d_sub; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // AND 
   ///////////////////////////////////////////// 
   d_and { dp_out = rs1_dato & rs2_dato; }
   tr_rv32i_and { unique @c_instr_i_and { 
      d_rs1i_addr; d_rs2i_addr; 
      d_and; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // OR 
   ///////////////////////////////////////////// 
   d_or { dp_out = rs1_dato | rs2_dato; }
   tr_rv32i_or { unique @c_instr_i_or { 
      d_rs1i_addr; d_rs2i_addr; 
      d_or; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // XOR 
   ///////////////////////////////////////////// 
   d_xor { dp_out = rs1_dato ^ rs2_dato; }
   tr_rv32i_xor { unique @c_instr_i_xor { 
      d_rs1i_addr; d_rs2i_addr; 
      d_xor; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // SLL 
   ///////////////////////////////////////////// 
   d_sll { dp_out = rs1_dato << rs2_dato; }
   tr_rv32i_sll { unique @c_instr_i_sll { 
      d_rs1i_addr; d_rs2i_addr; 
      d_sll; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // SRL 
   ///////////////////////////////////////////// 
   d_srl { dp_out = rs1_dato >> rs2_dato; }
   tr_rv32i_srl { unique @c_instr_i_srl { 
      d_rs1i_addr; d_rs2i_addr; 
      d_srl; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // SRA 
   ///////////////////////////////////////////// 
   d_sra { dp_out = $signed(rs1_dato) >>> rs2_dato; }
   tr_rv32i_sra { unique @c_instr_i_sra { 
      d_rs1i_addr; d_rs2i_addr; 
      d_sra; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // JAL 
   ///////////////////////////////////////////// 
   item [31:0] offset_20 = {{11{j_type[19]}}, j_type, 1'b0};
   d_jal { dp_out = pc + 4; }
   d_pc_jal { pc = pc + offset_20; }
   tr_rv32i_jal { unique @c_instr_i_jal { 
      d_jal; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc_jal; } } 
   ///////////////////////////////////////////// 
   // JALR 
   ///////////////////////////////////////////// 
   item [11:0] imm_11 = {{20{instr[31]}}, instr[31:20]};
   d_jalr { dp_out = pc + 4; }
   d_pc_jalr { pc = rs1_dato + imm_11; }
   tr_rv32i_jalr { unique @c_instr_i_jalr { 
      d_rs1i_addr; 
      d_jalr; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc_jalr; } } 
   ///////////////////////////////////////////// 
   // BEQ 
   ///////////////////////////////////////////// 
   c_cond_beq { if (rs1_dato == rs2_dato) this; }
   d_pc_branch { pc = pc + {b_type, 1'b0}; }
   tr_rv32i_beq { unique @c_instr_i_beq { 
      d_rs1i_addr; d_rs2i_addr; 
      @c_cond_beq { d_pc_branch; }  else { d_pc4; } } } 
   ///////////////////////////////////////////// 
   // BNE 
   ///////////////////////////////////////////// 
   c_cond_bne { if (rs1_dato != rs2_dato) this; }
   tr_rv32i_bne { unique @c_instr_i_bne { 
      d_rs1i_addr; d_rs2i_addr; 
      @c_cond_bne { d_pc_branch; }  else { d_pc4; } } } 
   ///////////////////////////////////////////// 
   // BLT 
   ///////////////////////////////////////////// 
   c_cond_blt { if ($signed(rs1_dato) < $signed(rs2_dato)) this; }
   tr_rv32i_blt { unique @c_instr_i_blt { 
      d_rs1i_addr; d_rs2i_addr; 
      @c_cond_blt { d_pc_branch; }  else { d_pc4; } } } 
   ///////////////////////////////////////////// 
   // BGE 
   ///////////////////////////////////////////// 
   c_cond_bge { if ($signed(rs1_dato) >= $signed(rs2_dato)) this; }
   tr_rv32i_bge { unique @c_instr_i_bge { 
      d_rs1i_addr; d_rs2i_addr; 
      @c_cond_bge { d_pc_branch; }  	else { d_pc4; } } } 
   ///////////////////////////////////////////// 
   // BLTU 
   ///////////////////////////////////////////// 
   c_cond_bltu { if (rs1_dato < rs2_dato) this; }
   tr_rv32i_bltu { unique @c_instr_i_bltu { 
      d_rs1i_addr; 
      d_rs2i_addr; 
      @c_cond_bltu { d_pc_branch; }  	else { d_pc4; } } } 
   ///////////////////////////////////////////// 
   // BGEU 
   ///////////////////////////////////////////// 
   c_cond_bgeu { if (rs1_dato >= rs2_dato) this; }
   tr_rv32i_bgeu { unique @c_instr_i_bgeu { 
      d_rs1i_addr; d_rs2i_addr; 
      @c_cond_bgeu { d_pc_branch; }  	else { d_pc4; } } } 
   ///////////////////////////////////////////// 
   // LW, LH, LHU, LB, LBU 
   ///////////////////////////////////////////// 
   d_load_lb { dp_out = {{24{dmem_load_data[7]}}, dmem_load_data[7:0]}; }
   d_load_lh { dp_out = {{16{dmem_load_data[15]}},  dmem_load_data[15:0]}; }
   d_load_lw { dp_out = dmem_load_data; }
   d_load_lbu { dp_out = {{24{1'b0}}, dmem_load_data[7:0]}; }
   d_load_lhu { dp_out = {{16{1'b0}}, dmem_load_data[15:0]}; }
   d_dmem_load_addr { dmem_load_addr = {{20{i_type[11]}}, i_type} + rs1_dato; }
   d_dmem_load_width { dmem_load_width = funct3_i[2:0]; }
   tr_rv32i_load { d_rs1i_addr; 
      d_dmem_load_addr; 
      d_dmem_load_width; 
      c_dmem_load; 
      d_rd_dp_out; d_rdi_addr; c_rf_write; 
      d_pc4; } 
   tr_rv32i_lw { unique @c_instr_i_lw { tr_rv32i_load; d_load_lw; } } 
   tr_rv32i_lh { unique @c_instr_i_lh { tr_rv32i_load; d_load_lh; } } 
   tr_rv32i_lhu { unique @c_instr_i_lhu { tr_rv32i_load; d_load_lhu; } } 
   tr_rv32i_lb { unique @c_instr_i_lb { tr_rv32i_load; d_load_lb; } } 
   tr_rv32i_lbu { unique @c_instr_i_lbu { tr_rv32i_load; d_load_lbu; } } 
   ///////////////////////////////////////////// 
   // SW, SB, SH 
   ///////////////////////////////////////////// 
   d_dmem_store_addr {
      dmem_store_addr = {{20{s_type[11]}}, s_type} + rs1_dato; }
   d_dmem_store_width { dmem_store_width = funct3_i[2:0]; }
   d_dmem_store_data { dmem_store_data = rs2_dato; }
   tr_rv32i_store {
      d_rs1i_addr; 
      d_rs2i_addr; 
      d_dmem_store_addr; 
      d_dmem_store_width; 
      c_dmem_store; 
      d_pc4; } 
   tr_rv32i_sw { unique @c_instr_i_sw { tr_rv32i_store;  d_dmem_store_data; } }
   tr_rv32i_sb { unique @c_instr_i_sb { tr_rv32i_store;  d_dmem_store_data; } }
   tr_rv32i_sh { unique @c_instr_i_sh { tr_rv32i_store;  d_dmem_store_data; } }
   ///////////////////////////////////////////// 
   // FENCE 
   ///////////////////////////////////////////// 
   item [3:0] fm;
   item [3:0] pred;
   item [3:0] succ;
   d_fence { fm = instr[31:28]; pred = instr[27:24]; succ = instr[23:20]; }
   tr_rv32i_fence { unique @c_instr_i_fence { 
      d_rs1i_addr; 
      d_fence; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // ECALL 
   ///////////////////////////////////////////// 
   tr_rv32i_ecall { unique @c_instr_i_ecall { 
      d_pc4; } } 
   tr_rv32i_ebreak { unique @c_instr_i_ebreak { 
      d_pc4; } } 
   ///////////////////////////////////////////// 
   // Registerfile 
   ///////////////////////////////////////////// 
   // read from rf; 
   item [31:0] rs1_dato;
   item [31:0] rs2_dato;
   d_rs1_dato { rs1_dato = (rs1_addr == 0) ? 0 : rf[rs1_addr]; } 
   d_rs2_dato { rs2_dato = (rs2_addr == 0) ? 0 : rf[rs2_addr]; } 
   tr_rs_dato { d_rs2_dato; d_rs1_dato; } 
   // write to rf; 
   d_rf_write { rf[rd_addr] = rd_dati; } 
   c_rf_write; 
   tr_rf_write { @c_rf_write { d_rf_write; } } 
   item [4:0] rs1_addr;
   item [4:0] rs2_addr;
   item [4:0] rd_addr;
   item [31 : 0] rd_dati;
   d_rd_dp_out { rd_dati = dp_out; } 
   d_rs1i_addr { rs1_addr = rs1i; }
   d_rs2i_addr { rs2_addr = rs2i; }
   d_rdi_addr { rd_addr = rdi; }
   ///////////////////////////////////////////// 
   // PC cont 
   ///////////////////////////////////////////// 
   d_pc_rs1 { pc = d_rs1_dato; } 
   d_pc4 { pc = pc + 4; } 
   ///////////////////////////////////////////// 
   // Datapath 
   ///////////////////////////////////////////// 
   item [31:0] dp_out;
   ///////////////////////////////////////////// 
   // Memory interface 
   ///////////////////////////////////////////// 
   item [32:0] dmem_load_addr;
   item [2:0] dmem_load_width;
   item [31:0] dmem_load_data;
   c_dmem_load;
   item [32:0] dmem_store_addr;
   item [2:0] dmem_store_width;
   item [31:0] dmem_store_data;
   c_dmem_store;
} ">
<" cl_rv32i_dec {
   ///////////////////////////////////////////// 
   // Support function 
   ///////////////////////////////////////////// 
   c_cmp(integer a, integer b) { if (a == b) this; }
   ///////////////////////////////////////////// 
   // I transactions 
   ///////////////////////////////////////////// 
   tr_rv32i { 
      tr_rv32i_lui;  tr_rv32i_auipc;  tr_rv32i_jal;  tr_rv32i_jalr; 
      tr_rv32i_beq;  tr_rv32i_bne;  tr_rv32i_blt;  tr_rv32i_bge;  tr_rv32i_bltu;  tr_rv32i_bgeu; 
      tr_rv32i_lb;  tr_rv32i_lh;  tr_rv32i_lw;  tr_rv32i_lbu;  tr_rv32i_lhu; 
      tr_rv32i_sb;  tr_rv32i_sh;  tr_rv32i_sw; 
      tr_rv32i_addi;  tr_rv32i_slti;  tr_rv32i_sltiu;  tr_rv32i_xori;  tr_rv32i_ori;  tr_rv32i_andi; 
      tr_rv32i_slli;  tr_rv32i_srli;  tr_rv32i_srai; 
      tr_rv32i_add;  tr_rv32i_sub;  tr_rv32i_sll;  tr_rv32i_slt;  tr_rv32i_sltu; 
      tr_rv32i_xor;  tr_rv32i_srl;  tr_rv32i_sra;  tr_rv32i_or;  tr_rv32i_and; 
      tr_rv32i_fence; tr_rv32i_ecall; tr_rv32i_ebreak; } 
   ///////////////////////////////////////////// 
   // I conditions 
   ///////////////////////////////////////////// 
   c_instr_i_lui;  c_instr_i_auipc;  c_instr_i_jal; c_instr_i_jalr;
   c_instr_i_beq;  c_instr_i_bne;  c_instr_i_blt;  c_instr_i_bge;  c_instr_i_bltu;  c_instr_i_bgeu;
   c_instr_i_lb;  c_instr_i_lh;  c_instr_i_lw;  c_instr_i_lbu;  c_instr_i_lhu;
   c_instr_i_sb;  c_instr_i_sh;  c_instr_i_sw;
   c_instr_i_addi;  c_instr_i_slti;  c_instr_i_sltiu;  c_instr_i_xori;  c_instr_i_ori;  c_instr_i_andi;
   c_instr_i_slli;  c_instr_i_srli;  c_instr_i_srai;
   c_instr_i_add;  c_instr_i_sub;  c_instr_i_sll;  c_instr_i_slt;  c_instr_i_sltu;
   c_instr_i_xor;  c_instr_i_srl;  c_instr_i_sra;  c_instr_i_or;  c_instr_i_and;
   c_instr_i_fence;  c_instr_i_ecall;  c_instr_i_ebreak;
   ///////////////////////////////////////////// 
   // I decode 
   ///////////////////////////////////////////// 
   tr_decode {
      @c_cmp(opcode_i, 7'b0110111) { c_instr_i_lui; }
      @c_cmp(opcode_i, 7'b0010111) { c_instr_i_auipc; }
      @c_cmp(opcode_i, 7'b1101111) { c_instr_i_jal; }
      @c_cmp(opcode_i, 7'b1100111) {
         @c_cmp(funct3_i, 0) { c_instr_i_jalr; } }
      @c_cmp(opcode_i, 7'b0000011) {
         @c_cmp(funct3_i, 0) { c_instr_i_lb; }
         @c_cmp(funct3_i, 1) { c_instr_i_lh; }
         @c_cmp(funct3_i, 2) { c_instr_i_lw; }
         @c_cmp(funct3_i, 4) { c_instr_i_lbu; }
         @c_cmp(funct3_i, 5) { c_instr_i_lhu; } }
      @c_cmp(opcode_i, 7'b0010011) {
         @c_cmp(funct3_i, 0) { c_instr_i_addi; }
         @c_cmp(funct3_i, 1) { 
            @c_cmp(funct7_i, 0) { c_instr_i_slli; } }
         @c_cmp(funct3_i, 2) { c_instr_i_slti; }
         @c_cmp(funct3_i, 3) { c_instr_i_sltiu; }
         @c_cmp(funct3_i, 4) { c_instr_i_xori; }
         @c_cmp(funct3_i, 5) { 
           	@c_cmp(funct7_i, 0) { c_instr_i_srli; }
           	@c_cmp(funct7_i, 32) { c_instr_i_srai; } }
         @c_cmp(funct3_i, 6) { c_instr_i_ori; }
         @c_cmp(funct3_i, 7) { c_instr_i_andi; } }
      @c_cmp(opcode_i, 7'b0100011) {
         @c_cmp(funct3_i, 0) { c_instr_i_sb; }
         @c_cmp(funct3_i, 1) { c_instr_i_sh; }
         @c_cmp(funct3_i, 2) { c_instr_i_sw; } }
      @c_cmp(opcode_i, 7'b0110011) {
         @c_cmp(funct3_i, 0) {
           	@c_cmp(funct7_i, 0) { c_instr_i_add; }
           	@c_cmp(funct7_i, 32) { c_instr_i_sub; } }
         @c_cmp(funct3_i, 1) {
           	@c_cmp(funct7_i, 0) { c_instr_i_sll; } }
         @c_cmp(funct3_i, 2) {
           	@c_cmp(funct7_i, 0) { c_instr_i_slt; } }
         @c_cmp(funct3_i, 3) {
           	@c_cmp(funct7_i, 0)  { c_instr_i_sltu; } }
         @c_cmp(funct3_i, 4) { @c_cmp(funct7_i, 0)  { c_instr_i_xor; } }
         @c_cmp(funct3_i, 5) {
           	@c_cmp(funct7_i, 0)  { c_instr_i_srl; }
           	@c_cmp(funct7_i, 32) { c_instr_i_sra; } }
         @c_cmp(funct3_i, 6) { @c_cmp(funct7_i, 0)  { c_instr_i_or; } }
     	   @c_cmp(funct3_i, 7) { @c_cmp(funct7_i, 0)  { c_instr_i_and; } } }
      @c_cmp(opcode_i, 7'b1100011) {
         @c_cmp(funct3_i, 0) { c_instr_i_beq; }
         @c_cmp(funct3_i, 1) { c_instr_i_bne; }
         @c_cmp(funct3_i, 4) { c_instr_i_blt; }
         @c_cmp(funct3_i, 5) { c_instr_i_bge; }
         @c_cmp(funct3_i, 6) { c_instr_i_bltu; }
         @c_cmp(funct3_i, 7) { c_instr_i_bgeu; } } 
      @c_cmp(opcode_i, 7'b1110011) {
         @c_cmp(funct3_i, 0) { c_instr_i_fence; } }
      @c_cmp(opcode_i, 7'b1110011) {
         @c_cmp(instr[31:7], 25'h000000) { c_instr_i_ecall; }
         @c_cmp(instr[31:7], 25'h002000) { c_instr_i_ebreak; } } }
} ">
<" cl_rv32m_dec {
   ///////////////////////////////////////////// 
   // M conditions 
   ///////////////////////////////////////////// 
   c_instr_m_mul;
   c_instr_m_mulh;
   c_instr_m_mulhu;
   c_instr_m_mulhsu;
   c_instr_m_div;
   c_instr_m_divu;
   c_instr_m_rem;
   c_instr_m_remu;
   ///////////////////////////////////////////// 
   // M decode 
   ///////////////////////////////////////////// 
   tr_m_decode {
   @c_cmp(opcode_i, 7'b0110011) {
      @c_cmp(funct7_i, 7'b0000001) { 
         @c_cmp(funct3_i, 0) { c_instr_m_mul; }
         @c_cmp(funct3_i, 1) { c_instr_m_mulh; }
         @c_cmp(funct3_i, 2) { c_instr_m_mulhsu; }
         @c_cmp(funct3_i, 3) { c_instr_m_mulhu; }
         @c_cmp(funct3_i, 4) { c_instr_m_div; }
         @c_cmp(funct3_i, 5) { c_instr_m_divu; }
         @c_cmp(funct3_i, 6) { c_instr_m_rem; }
         @c_cmp(funct3_i, 7) { c_instr_m_remu; } } } }
} ">
<" cl_rv32m {
   ///////////////////////////////////////////// 
   // M transactions
   ///////////////////////////////////////////// 
   tr_rv32m { 
      tr_rv32m_mul; 
      tr_rv32m_mulh; 
      tr_rv32m_mulhu; 
      tr_rv32m_mulhsu; 
      tr_rv32m_div; 
      tr_rv32m_divu; 
      tr_rv32m_rem; 
      tr_rv32m_remu; } 
   ///////////////////////////////////////////// 
   // M conditions and datapaths 
   ///////////////////////////////////////////// 
   tr_rv32m_math {
      d_rs1i_addr; 
      d_rs2i_addr; 
      d_rd_dp_out; d_rdi_addr; c_rf_write;  
      d_pc4; }
   ///////////////////////////////////////////// 
   // MUL 
   ///////////////////////////////////////////// 
   item [63:0] i_m_mul = rs1_dato * rs2_dato; 
   d_mul { dp_out = i_m_mul[31:0]; }
   tr_rv32m_mul { unique @c_instr_m_mul { 
      d_mul; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // MULH 
   ///////////////////////////////////////////// 
   item [63:0] i_m_mulh = $signed(rs1_dato) * $signed(rs2_dato); 
   d_mulh { dp_out = i_m_mulh[63:32]; }
   tr_rv32m_mulh { unique @c_instr_m_mulh { 
      d_mulh; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // MULHU 
   ///////////////////////////////////////////// 
   item [63:0] i_m_mulhu = rs1_dato * rs2_dato; 
   d_mulhu { dp_out = i_m_mulhu[63:32]; }
   tr_rv32m_mulhu { unique @c_instr_m_mulhu { 
      d_mulhu; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // MULHSU 
   ///////////////////////////////////////////// 
   item [63:0] i_m_mulhsu = {{32{rs1_dato[31]}}, rs1_dato} * {32'h00000000, rs2_dato};
   d_mulhsu { dp_out = i_m_mulhsu[63:32]; }
   tr_rv32m_mulhsu { unique @c_instr_m_mulhsu { 
      d_mulhsu; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // DIV 
   ///////////////////////////////////////////// 
   d_div { dp_out = $signed(rs1_dato) / $signed(rs2_dato); }
   tr_rv32m_div { unique @c_instr_m_div { 
      d_div; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // DIVU 
   ///////////////////////////////////////////// 
   d_divu { dp_out = rs1_dato / rs2_dato; }
   tr_rv32m_divu { unique @c_instr_m_divu { 
      d_divu; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // REM 
   ///////////////////////////////////////////// 
   d_rem { dp_out = $signed(rs1_dato) % $signed(rs2_dato); }
   tr_rv32m_rem { unique @c_instr_m_rem { 
      d_rem; 
      tr_rv32m_math; } } 
   ///////////////////////////////////////////// 
   // REMU 
   ///////////////////////////////////////////// 
   d_remu { dp_out = rs1_dato % rs2_dato; }
   tr_rv32m_remu { unique @c_instr_m_remu { 
      d_remu; 
      tr_rv32m_math; } } 
} ">
<" cl_rv32c {
   ///////////////////////////////////////////// 
   // C transactions 
   ///////////////////////////////////////////// 
   tr_rv32c { 
      tr_rv32c_addi4sp; 
      tr_rv32c_lw; 
      tr_rv32c_sw; 
      tr_rv32c_nop; 
      tr_rv32c_addi; 
      tr_rv32c_jal; 
      tr_rv32c_li; 
      tr_rv32c_lui; 
      tr_rv32c_addi16sp; 
      tr_rv32c_srli; 
      tr_rv32c_srai; 
      tr_rv32c_andi; 
      tr_rv32c_sub; 
      tr_rv32c_xor; 
      tr_rv32c_or; 
      tr_rv32c_and; 
      tr_rv32c_j; 
      tr_rv32c_beqz; 
      tr_rv32c_bnez; 
      tr_rv32c_slli; 
      tr_rv32c_lwsp; 
      tr_rv32c_jr; 
      tr_rv32c_mv; 
      tr_rv32c_ebreak; 
      tr_rv32c_jalr; 
      tr_rv32c_add; 
      tr_rv32c_swsp; } 
   ///////////////////////////////////////////// 
   // Formats 
   ///////////////////////////////////////////// 
   item [2] opcode_c = instr[1:0];
   item [3] funct3_c = instr[15:13];
   item [3] funct2_c = instr[6:5];
   d_pc2 { pc = pc + 2; } 
   d_rs1_c_addr { rs1_addr = instr[11:7]; }
   d_rs1sp_c_addr { rs1_addr = 2; }
   d_rs1a1_c_addr { rs1_addr = {2'b01, instr[9:7]}; }
   d_rs2_c_addr { rs2_addr = instr[6:2]; }
   d_rs2a1_c_addr { rs2_addr = {2'b01, instr[4:2]}; }
   d_rd_c_addr { rd_addr = instr[11:7]; }
   d_rda1_c_addr { rd_addr = {2'b01, instr[4:2]}; }
   d_rda2_c_addr { rd_addr = {2'b01, instr[9:7]}; }
   ///////////////////////////////////////////// 
   // Load 
   ///////////////////////////////////////////// 
   item [31:0] offset_c = {{26{1'b0}}, instr[5], instr[12:10], instr[6], 2'b00};
   d_load_lw_c { dp_out = dmem_load_data; }
   d_dmem_load_addr_c { dmem_load_addr = offset_c + rs1_dato; }
   d_dmem_load_width_c { dmem_load_width = 2; }
   tr_rv32c_load {
     d_dmem_load_width_c; 
     c_dmem_load; 
     d_load_lw_c ; 
     d_rd_dp_out; c_rf_write; 
     d_pc2; } 
   ///////////////////////////////////////////// 
   // C.LWSP 
   ///////////////////////////////////////////// 
   item [31:0] offset_lwsp_c = {{26{1'b0}}, instr[3:2], instr[12], instr[6:4], 2'b00};
   d_dmem_load_addr_lwsp_c { dmem_load_addr = offset_lwsp_c + rs1_dato; }
   tr_rv32c_lwsp { unique @c_instr_c_lwsp {
      d_rs1sp_c_addr; 
      d_dmem_load_addr_lwsp_c; 
      d_rd_c_addr; 
      tr_rv32c_load; } } 
   ///////////////////////////////////////////// 
   // Store 
   ///////////////////////////////////////////// 
   d_dmem_store_addr_c { dmem_store_addr = offset_c + rs1_dato; }
   d_dmem_store_width_c { dmem_store_width = 2; }
   d_dmem_store_data_c { dmem_store_data = rs2_dato; }
   tr_rv32c_store { 
      d_dmem_store_width_c; 
      c_dmem_store; 
      d_dmem_store_data_c; 
      d_pc2; }
   ///////////////////////////////////////////// 
   // C.SWSP 
   ///////////////////////////////////////////// 
   item [31:0] offset_swsp_c = {{25{1'b0}}, instr[8:7], instr[12:9], 2'b00};
   d_dmem_store_addr_sp_c { dmem_store_addr = offset_swsp_c + rs1_dato; }
   tr_rv32c_swsp { unique @c_instr_c_swsp { 
      d_rs1sp_c_addr; 
      d_rs2_c_addr; 
      d_dmem_store_addr_sp_c; 
      tr_rv32c_store; } } 
   ///////////////////////////////////////////// 
   // C.LW 
   ///////////////////////////////////////////// 
   tr_rv32c_lw { unique @c_instr_c_lw {
      d_rs1a1_c_addr; 
      d_dmem_load_addr_c; 
      d_rda1_c_addr;
      tr_rv32c_load; } } 
   ///////////////////////////////////////////// 
   // C.SW 
   ///////////////////////////////////////////// 
   tr_rv32c_sw { unique @c_instr_c_sw { 
      d_rs1a1_c_addr; 
      d_rs2a1_c_addr; 
      d_dmem_store_addr_c; 
      tr_rv32c_store; } } 
   ///////////////////////////////////////////// 
   // C.J 
   ///////////////////////////////////////////// 
   item [31:0] imm_j_c = {{26{instr[12]}}, instr[12], instr[8], 
            instr[10:9], instr[6], instr[7], instr[2], instr[11], instr[5:3], 1'b0};
   d_pc_j_c { pc = pc + imm_j_c; }
   tr_rv32c_j { unique @c_instr_c_j {
      d_pc_j_c; } } 
   ///////////////////////////////////////////// 
   // C.JAL 
   ///////////////////////////////////////////// 
   item [31:0] imm_jal_c = {{26{instr[12]}}, instr[12], instr[8], 
            instr[10:9], instr[6], instr[7], instr[2], instr[11], instr[5:3], 1'b0};
   d_jal_c { dp_out = pc + 2; }
   d_rd_link_c_addr { rd_addr = 1; }
   tr_rv32c_jal { unique @c_instr_c_jal {
      d_jal_c; 
      d_rd_dp_out; d_rd_link_c_addr; c_rf_write;  
      d_pc_j_c; } } 
   ///////////////////////////////////////////// 
   // C.JR 
   ///////////////////////////////////////////// 
   d_pc_jr_c { pc = rs1_dato; }
   tr_rv32c_jr { unique @c_instr_c_jr { 
      d_rs1_c_addr; 
      d_pc_jr_c; } } 
   ///////////////////////////////////////////// 
   // C.JALR 
   ///////////////////////////////////////////// 
   d_pc_jalr_c { pc = rs1_dato; }
   d_jalr_c { dp_out = pc + 2; }
   tr_rv32c_jalr { unique @c_instr_c_jalr { 
      d_rs1_c_addr; 
      d_jalr_c; 
      d_rd_dp_out; d_rd_link_c_addr; c_rf_write;  
      d_pc_jalr_c; } } 
   ///////////////////////////////////////////// 
   // C.BEQZ 
   ///////////////////////////////////////////// 
   item [31:0] sign_ext_imm8_c = {{26{instr[12]}}, instr[12], 
            instr[6:5], instr[5], instr[11:10], instr[4:3], 1'b0};
   d_pc_branch_c { pc = pc + sign_ext_imm8_c; }
   c_cond_beqz_c { if (rs1_dato == 0) this; }
   tr_rv32c_beqz { unique @c_instr_c_beqz { 
      d_rs1a1_c_addr;
      @c_cond_beqz_c { d_pc_branch_c; }
      else { d_pc2; } } } 
   ///////////////////////////////////////////// 
   // C.BNEZ 
   ///////////////////////////////////////////// 
   c_cond_bnez_c { if (rs1_dato != 0) this; }
   tr_rv32c_bnez { unique @c_instr_c_bnez { 
      d_rs1a1_c_addr; 
      @c_cond_bnez_c { d_pc_branch_c; }
      else { d_pc2; } } } 
   ///////////////////////////////////////////// 
   // C.LI
   ///////////////////////////////////////////// 
   d_li_c { dp_out = {{26{instr[12]}}, instr[12], instr[6:2]}; }
   tr_rv32c_li { unique @c_instr_c_li { 
      d_li_c; 
      d_rd_dp_out; d_rd_c_addr; c_rf_write;  
      d_pc2; } } 
   ///////////////////////////////////////////// 
   // C.LUI 
   ///////////////////////////////////////////// 
   d_lui_c { dp_out = {{14{instr[12]}}, instr[12], instr[6:2], 12'h000}; }
   tr_rv32c_lui { unique @c_instr_c_lui { 
      d_lui_c; 
      d_rd_dp_out; d_rd_c_addr; c_rf_write;  
      d_pc2; } } 
   ///////////////////////////////////////////// 
   // Register-Immediate 
   ///////////////////////////////////////////// 
   tr_rv32c_reg_imm {
      d_rd_dp_out; c_rf_write;  
      d_pc2; }
   item [31:0] sign_ext_imm6 = {{26{instr[12]}}, instr[12], instr[6:2]};
   item [31:0] sign_ext_imm6_sp = {{22{instr[12]}}, instr[12],
            instr[4:3], instr[5], instr[2], instr[6], 4'h0};
   ///////////////////////////////////////////// 
   // .C.ADDI
   ///////////////////////////////////////////// 
   d_c_addi { dp_out = rs1_dato + sign_ext_imm6; }
   tr_rv32c_addi { unique @c_instr_c_addi {
      d_rs1_c_addr; 
      d_c_addi; 
      d_rd_c_addr;
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.ADDI16SP
   ///////////////////////////////////////////// 
   d_c_addi16sp { dp_out = rs1_dato + sign_ext_imm6_sp; }
   tr_rv32c_addi16sp { unique @c_instr_c_addi16sp { 
      d_rs1_c_addr; 
      d_c_addi16sp; 
      d_rd_c_addr;
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.ADDI4SP 
   ///////////////////////////////////////////// 
   item [31:0] sign_ext_imm8 = {{22{instr[10]}}, instr[10:7],
            instr[12:11], instr[5], instr[6], 2'b00};
   d_c_addi4sp { dp_out = rs1_dato + sign_ext_imm8; }
   tr_rv32c_addi4sp { unique @c_instr_c_addi4sp { 
      d_rs1sp_c_addr; 
      d_c_addi4sp; 
      d_rda1_c_addr; 
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.SLLI 
   ///////////////////////////////////////////// 
   item [5:0] i_shamt_c = {instr[12], instr[6:2]};
   d_c_slli { dp_out = rs1_dato << i_shamt_c; }
   tr_rv32c_slli { unique @c_instr_c_slli { 
      d_rs1_c_addr; 
      d_c_slli; 
      d_rd_c_addr; 
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.SRLI 
   ///////////////////////////////////////////// 
   d_c_srli { dp_out = rs1_dato >> i_shamt_c; }
   tr_rv32c_srli { unique @c_instr_c_srli { 
      d_rs1a1_c_addr; 
      d_c_srli; 
      d_rda2_c_addr;
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.SRAI 
   ///////////////////////////////////////////// 
   d_c_srai { dp_out = $signed(rs1_dato) >>> i_shamt_c; }
   tr_rv32c_srai { unique @c_instr_c_srai { 
      d_rs1a1_c_addr; 
      d_c_srai; 
      d_rda2_c_addr;
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.ANDI 
   ///////////////////////////////////////////// 
   d_c_andi { dp_out = rs1_dato & sign_ext_imm6; }
   tr_rv32c_andi { unique @c_instr_c_andi { 
      d_rs1a1_c_addr; 
      d_c_andi; 
      d_rda2_c_addr;
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.ADD 
   ///////////////////////////////////////////// 
   d_c_add { dp_out = rs1_dato + rs2_dato; }
   tr_rv32c_add { unique @c_instr_c_add { 
      d_rs1_c_addr; 
      d_rs2_c_addr; 
      d_c_add; 
      d_rd_c_addr;
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.MV 
   ///////////////////////////////////////////// 
   d_c_mv { dp_out = rs2_dato; }
   tr_rv32c_mv { unique @c_instr_c_mv { 
      d_rs2_c_addr; 
      d_c_mv; 
      d_rd_c_addr;
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.AND 
   ///////////////////////////////////////////// 
   d_c_and { dp_out = rs1_dato & rs2_dato; }
   tr_rv32c_and { unique @c_instr_c_and { 
      d_rs1a1_c_addr; 
      d_rs2a1_c_addr; 
      d_c_and; 
      d_rda2_c_addr;
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.OR 
   ///////////////////////////////////////////// 
   d_c_or { dp_out = rs1_dato | rs2_dato; }
   tr_rv32c_or { unique @c_instr_c_or { 
      d_rs1a1_c_addr; 
      d_rs2a1_c_addr; 
      d_c_or; 
      d_rda2_c_addr;
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.XOR 
   ///////////////////////////////////////////// 
   d_c_xor { dp_out = rs1_dato ^ rs2_dato; }
   tr_rv32c_xor { unique @c_instr_c_xor { 
      d_rs1a1_c_addr; 
      d_rs2a1_c_addr; 
      d_c_xor; 
      d_rda2_c_addr;
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.SUB 
   ///////////////////////////////////////////// 
   d_c_sub { dp_out = rs1_dato - rs2_dato; }
   tr_rv32c_sub { unique @c_instr_c_sub { 
      d_rs1a1_c_addr; 
      d_rs2a1_c_addr; 
      d_c_sub; 
      d_rda2_c_addr; 
      tr_rv32c_reg_imm; } } 
   ///////////////////////////////////////////// 
   // C.NOP 
   ///////////////////////////////////////////// 
   tr_rv32c_nop { unique @c_instr_c_nop { 
      d_pc2; } } 
   ///////////////////////////////////////////// 
   // C.EBREAK 
   ///////////////////////////////////////////// 
   tr_rv32c_ebreak { unique @c_instr_c_ebreak { 
      d_pc2; } } 
} ">
<" cl_rv32c_list { 
   ///////////////////////////////////////////// 
   // C conditions 
   ///////////////////////////////////////////// 
   c_instr_c_addi4sp;
   c_instr_c_lw;
   c_instr_c_sw;
   c_instr_c_nop;
   c_instr_c_addi; 
   c_instr_c_jal;
   c_instr_c_li;
   c_instr_c_lui;
   c_instr_c_addi16sp;
   c_instr_c_srli;
   c_instr_c_srai;
   c_instr_c_andi;
   c_instr_c_sub;
   c_instr_c_xor;
   c_instr_c_or;
   c_instr_c_and;
   c_instr_c_j;
   c_instr_c_beqz;
   c_instr_c_bnez;
   c_instr_c_slli;
   c_instr_c_lwsp;
   c_instr_c_jr;
   c_instr_c_mv;
   c_instr_c_ebreak;
   c_instr_c_jalr;
   c_instr_c_add;
   c_instr_c_swsp;
   c_c_op_0 { if (instr[1:0] == 2'b00) this; }
   c_c_op_1 { if (instr[1:0] == 2'b01) this; }
   c_c_op_2 { if (instr[1:0] == 2'b10) this; }
   c_c_rd_not_x0 { if (instr[11:7] != 5'b00000) this; }
   c_c_rd_not_x2 { if (instr[11:7] != 5'b00010) this; }
   c_c_rs1_x0 { if (instr[11:7] == 5'b00000) this; }
   c_c_rs1_not_x0 { if (instr[11:7] != 5'b00000) this; }
   c_c_rs2_x0 { if (instr[6:2] == 5'b00000) this; }
   c_c_rs2_not_x0 { if (instr[6:2] != 5'b00000) this; }
   c_c_nzimm_not_x0 { if ( sign_ext_imm6 != 32'h00000000) this; }
   c_c_nzimm_sp_not_x0 { if ( sign_ext_imm6_sp != 32'h00000000) this; }
} ">
<" cl_rv32c_dec_op0 {
   ///////////////////////////////////////////// 
   // Quadrant 0 decode 
   ///////////////////////////////////////////// 
   tr_c_decode_op_0 {
     	@c_cmp(opcode_c, 0) {
     	  	@c_cmp(funct3_c, 0) { c_instr_c_addi4sp; }
     	  	@c_cmp(funct3_c, 2) { c_instr_c_lw; }
     	  	@c_cmp(funct3_c, 6) { c_instr_c_sw; } } }
} ">
<" cl_rv32c_dec_op1 {
   ///////////////////////////////////////////// 
   // Quadrant 1 decode 
   ///////////////////////////////////////////// 
   tr_c_decode_op_1 {
      @c_c_op_1 {
        	@c_cmp(funct3_c, 0) {
        	  	@c_c_rs1_x0 { c_instr_c_nop; }
        	  	@c_c_nzimm_not_x0 {
        	     	@c_c_rd_not_x0 { c_instr_c_addi; } } }
         @c_cmp(funct3_c, 1) { c_instr_c_jal; }
         @c_cmp(funct3_c, 2) { c_instr_c_li; }
         @c_cmp(funct3_c, 3) {
            @c_c_rd_not_x0 {
               @c_c_rd_not_x2 { c_instr_c_lui; } }
        	  @c_cmp(instr[11:7], 2) { c_instr_c_addi16sp; } }
         @c_cmp(funct3_c, 4) {
            @c_cmp(instr[11:10], 0) { c_instr_c_srli; }
            @c_cmp(instr[11:10], 1) { c_instr_c_srai; }
            @c_cmp(instr[11:10], 2) { c_instr_c_andi; }
            @c_cmp(instr[11:10], 3) { 
               @c_cmp(instr[12], 0) { 
                  @c_cmp(instr[6:5], 0) { c_instr_c_sub; }
                  @c_cmp(instr[6:5], 1) { c_instr_c_xor; }
                  @c_cmp(instr[6:5], 2) { c_instr_c_or; }
                  @c_cmp(instr[6:5], 3) { c_instr_c_and; } } } }
         @c_cmp(funct3_c, 5) { c_instr_c_j; }
         @c_cmp(funct3_c, 6) { c_instr_c_beqz; }
         @c_cmp(funct3_c, 7) { c_instr_c_bnez; } } }
} ">
<" cl_rv32c_dec_op2 {
   ///////////////////////////////////////////// 
   // Quadrant 2 decode 
   ///////////////////////////////////////////// 
   tr_c_decode_op_2 {
      @c_c_op_2 {
         @c_cmp(funct3_c, 0) {
           @c_c_rd_not_x0 { c_instr_c_slli; } }
         @c_cmp(funct3_c, 2) { c_instr_c_lwsp; }
         @c_cmp(funct3_c, 4) {
            @c_cmp(instr[12], 0) {
               @c_c_rs1_not_x0 {
                  @c_c_rs2_x0 { c_instr_c_jr; } }
               @c_c_rd_not_x0 {
                  @c_c_rs2_not_x0 { c_instr_c_mv; } } }
            @c_cmp(instr[12], 1) {
               @c_c_rs1_x0 {
                  @c_c_rs2_x0 { c_instr_c_ebreak; } }
               @c_c_rs1_not_x0 {
                  @c_c_rs2_x0 { c_instr_c_jalr; } }
               @c_c_rd_not_x0 {
                  @c_c_rs1_not_x0 {
                     @c_c_rs2_not_x0 { c_instr_c_add; } } } } }
         @c_cmp(funct3_c, 6) { c_instr_c_swsp; } } }
} ">

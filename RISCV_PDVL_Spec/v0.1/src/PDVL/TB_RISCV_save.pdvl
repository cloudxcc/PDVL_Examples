<"

cl_rv32imc {}

build TB_RV32IMC {
   join cl_rv32i cl_rv32imc;
   join cl_rv32i_rf cl_rv32imc;
   join cl_rv32i_dec cl_rv32imc;
/*
   join cl_rv32m cl_rv32imc;
   join cl_rv32m_dec cl_rv32imc;
   join cl_rv32c cl_rv32imc;
   join cl_rv32c_list cl_rv32imc;
   join cl_rv32c_dec_op0 cl_rv32imc;
   join cl_rv32c_dec_op1 cl_rv32imc;
   join cl_rv32c_dec_op2 cl_rv32imc;
*/   
   join {
      e_clk posedge clk;  
      tr_rf_write { @c_rf_write { d_rf_write; } } 
      
	  tr_clocking { 
	     @e_clk  { 
            tr_rv32i;
//            tr_rv32m; 
//            tr_rv32c; 
            tr_rf_write; } }

	  tr_clocking_pc { 
	     @c_arst { d_pc_reset; }
         else { @e_clk  { d_pc_next; } } }
         
   } cl_rv32imc;
   
   place RISCV i_rv;
   join cl_rv32imc i_rv;
   //join cl_ios;
   join cl_clkgen;
   join cl_rstgen;
}

cl_clkgen {
	item clk;
    event e_clk posedge clk;
    d_clk_set { clk = 1; } 
    d_clk_clr { clk = 0; } 
    tr_e_clk { d_clk_clr;
               #10 d_clk_set; 
               #10 d_clk_clr; }
}
    
cl_rstgen {
    item arst;
    c_arst { if (arst == 1) this; }                     
    d_arst_set { arst = 1; } 
    d_arst_clr { arst = 0; } 
    tr_arst { d_arst_set; #100 d_arst_clr; }
}
/*
cl_ios {
	item [31:0] instr;
	item [31:0] dmem_load_data = 0;
	//item sink pc;
    d_dummy { instr = pc + 
	                  dmem_store_data + dmem_store_width + dmem_store_addr + 
	                  dmem_load_addr; }
    tr_dummy { @c_dmem_store { d_dummy; } }
}
*/   
">
